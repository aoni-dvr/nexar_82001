#############################################################
#
# EVA
#
#############################################################

pkg			= EVA

$(pkg)_VERSION		= 1.0
$(pkg)_SITE_METHOD	= local
$(pkg)_SITE		= $(AMBARELLA_PKG_DIR)/eva
$(pkg)_SOURCE		= eva-$($(pkg)_VERSION).tar.gz
#$(pkg)_DEPENDENCIES	= ambaipc amba_util controlbox ambacomm libscp openssl amba_examples
$(pkg)_DEPENDENCIES	= lua
$(pkg)_INSTALL_STAGING	= NO
$(pkg)_INSTALL_IMAGES	= NO
$(pkg)_INSTALL_TARGET	= YES
$(pkg)_LICENSE		= MIT
$(pkg)_LICENSE_FILES	= License_MIT.txt

EVA_INSTALL_OPTS += \
    LUA_VER=$(LUAINTERPRETER_ABIVER)


export BR2_PACKAGE_EVA



#Prepre command line for sub packages
ifeq ($(BR2_PACKAGE_EVA_TCPSERVER),y)
  INSTALL_EVA_TCPSERVER = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/Eva_TCPServer -f br.mk DESTDIR=$(TARGET_DIR) install
  BUILD_EVA_TCPSERVER =  $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/Eva_TCPServer -f br.mk
  CLEAN_EVA_TCPSERVER = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/Eva_TCPServer -f br.mk clean
else
  INSTALL_EVA_TCPSERVER =
  BUILD_EVA_TCPSERVER =
  CLEAN_EVA_TCPSERVER =
endif

ifeq ($(BR2_PACKAGE_EVA_CONTROLBOX_UNIT_TEST),y)
  STAGING_EVA_API_UNIT_TEST = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/unit_test -f br.mk DESTDIR=$(STAGING_DIR) lib_install
  INSTALL_EVA_API_UNIT_TEST = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(EVA_INSTALL_OPTS) $(MAKE) -C $(@D)/controlbox/unit_test -f br.mk DESTDIR=$(TARGET_DIR) install
  BUILD_EVA_API_UNIT_TEST = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/unit_test -f br.mk
  CLEAN_EVA_API_UNIT_TEST = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/unit_test -f br.mk clean
  UNINSTALL_STAGING_EVA_API_UNIT_TEST =  $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/unit_test -f br.mk DESTDIR=$(STAGING_DIR) lib_uninstall
else
  STAGING_EVA_API_UNIT_TEST =
  INSTALL_EVA_API_UNIT_TEST =
  BUILD_EVA_API_UNIT_TEST =
  CLEAN_EVA_API_UNIT_TEST =
  UNINSTALL_STAGING_EVA_API_UNIT_TEST =
endif

ifeq ($(BR2_PACKAGE_EVA_CONTROLBOX_LIB),y)
  STAGING_EVA_API_LIB = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/lib -f br.mk DESTDIR=$(STAGING_DIR) lib_install
  INSTALL_EVA_API_LIB = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/lib -f br.mk DESTDIR=$(TARGET_DIR) install
  BUILD_EVA_API_LIB = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/lib -f br.mk
  CLEAN_EVA_API_LIB = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/lib -f br.mk clean
  UNINSTALL_STAGING_EVA_API_LIB =  $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/controlbox/lib -f br.mk DESTDIR=$(STAGING_DIR) lib_uninstall
else
  STAGING_EVA_API_LIB =
  INSTALL_EVA_API_LIB =
  BUILD_EVA_API_LIB =
  CLEAN_EVA_API_LIB =
  UNINSTALL_STAGING_EVA_API_LIB =
endif


ifeq ($(BR2_PACKAGE_EVA_LIB_SHM),y)
  STAGING_EVA_LIB_SHM = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambashm -f br.mk DESTDIR=$(STAGING_DIR) lib_install
  INSTALL_EVA_LIB_SHM = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambashm -f br.mk DESTDIR=$(TARGET_DIR) install
  BUILD_EVA_LIB_SHM = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambashm -f br.mk
  CLEAN_EVA_LIB_SHM = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambashm -f br.mk clean
  UNINSTALL_STAGING_LIB_SHM =   $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambashm -f br.mk DESTDIR=$(STAGING_DIR) lib_uninstall
else
  STAGING_EVA_LIB_SHM =
  INSTALL_EVA_LIB_SHM =
  BUILD_EVA_LIB_SHM =
  CLEAN_EVA_LIB_SHM =
  UNINSTALL_STAGING_LIB_SHM =
endif

ifeq ($(BR2_PACKAGE_EVA_LIB_COMMON),y)
  STAGING_EVA_LIB_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambacommon -f br.mk DESTDIR=$(STAGING_DIR) lib_install
  INSTALL_EVA_LIB_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambacommon -f br.mk DESTDIR=$(TARGET_DIR) install
  BUILD_EVA_LIB_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambacommon -f br.mk
  CLEAN_EVA_LIB_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambacommon -f br.mk clean
  UNINSTALL_STAGING_LIB_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambacommon -f br.mk DESTDIR=$(STAGING_DIR) lib_uninstall
else
  STAGING_EVA_LIB_COMMON =
  INSTALL_EVA_LIB_COMMON =
  BUILD_EVA_LIB_COMMON =
  CLEAN_EVA_LIB_COMMON =
  UNINSTALL_STAGING_LIB_COMMON =
endif

ifeq ($(BR2_PACKAGE_EVA_LIB_TCP),y)
  STAGING_EVA_LIB_TCP = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambatcp -f br.mk DESTDIR=$(STAGING_DIR) lib_install
  INSTALL_EVA_LIB_TCP = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambatcp -f br.mk DESTDIR=$(TARGET_DIR) install
  BUILD_EVA_LIB_TCP = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambatcp -f br.mk
  CLEAN_EVA_LIB_TCP = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambatcp -f br.mk clean
  UNINSTALL_STAGING_LIB_TCP = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/UTIL_LIB/libambatcp -f br.mk DESTDIR=$(STAGING_DIR) lib_uninstall
else
  STAGING_EVA_LIB_TCP =
  INSTALL_EVA_LIB_TCP =
  BUILD_EVA_LIB_TCP =
  CLEAN_EVA_LIB_TCP =
  UNINSTALL_STAGING_LIB_TCP =
endif

#Prepre eva common folder
STAGING_EVA_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/common -f br.mk DESTDIR=$(STAGING_DIR) lib_install
INSTALL_EVA_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/common -f br.mk DESTDIR=$(TARGET_DIR) install
BUILD_EVA_COMMON =  $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/common -f br.mk
CLEAN_EVA_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/common -f br.mk clean
UNINSTALL_STAGING_COMMON = $(TARGET_CONFIGURE_OPTS) $(TARGET_MAKE_ENV) $(MAKE) -C $(@D)/common -f br.mk DESTDIR=$(STAGING_DIR) lib_uninstall


#BuildRoot macro
define EVA_INSTALL_TARGET_CMDS
  $(INSTALL_EVA_TCPSERVER)
endef

define EVA_BUILD_CMDS
  $(BUILD_EVA_COMMON)
  $(INSTALL_EVA_COMMON)
  $(STAGING_EVA_COMMON)

  $(BUILD_EVA_LIB_SHM)
  $(INSTALL_EVA_LIB_SHM)
  $(STAGING_EVA_LIB_SHM)

  $(BUILD_EVA_LIB_COMMON)
  $(INSTALL_EVA_LIB_COMMON)
  $(STAGING_EVA_LIB_COMMON)

  $(BUILD_EVA_LIB_TCP)
  $(INSTALL_EVA_LIB_TCP)
  $(STAGING_EVA_LIB_TCP)
  
  $(BUILD_EVA_API_LIB)
  $(INSTALL_EVA_API_LIB)
  $(STAGING_EVA_API_LIB)
  
  $(BUILD_EVA_API_UNIT_TEST)
  $(INSTALL_EVA_API_UNIT_TEST)
  $(STAGING_EVA_API_UNIT_TEST)

  $(BUILD_EVA_TCPSERVER) 
endef

define EVA_CLEAN_CMDS
  $(CLEAN_EVA_LIB_SHM)
  $(UNINSTALL_STAGING_LIB_SHM
  )
  $(CLEAN_EVA_LIB_COMMON)
  $(UNINSTALL_STAGING_LIB_COMMON)

  $(CLEAN_EVA_COMMON)
  $(UNINSTALL_STAGING_COMMON)  
  
  $(CLEAN_EVA_LIB_TCP)
  $(UNINSTALL_STAGING_LIB_TCP)
  
  $(CLEAN_EVA_API_LIB)
  $(UNINSTALL_STAGING_EVA_API_LIB)
  
  $(CLEAN_EVA_API_UNIT_TEST)
  $(UNINSTALL_STAGING_EVA_API_UNIT_TEST)
  
  $(CLEAN_EVA_TCPSERVER) 
endef

define EVA_POST_LEGAL_INFO_HOOKS_CMD
	@$(foreach F,$($(PKG)_LICENSE_FILES),$(call legal-license-file,$$($(PKG)_RAWNAME),$(F),$$($(PKG)_DIR)/$(F))$$(sep))
endef
EVA_POST_LEGAL_INFO_HOOKS += EVA_POST_LEGAL_INFO_HOOKS_CMD

$(eval $(generic-package))
