/*
 * iav_config.h
 *
 * History:
 *	2015/07/20 - [Jian Tang] modified file
 *
 * Copyright (c) 2016 Ambarella, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef __IAV_CONFIG_H__
#define __IAV_CONFIG_H__

// #include <config.h>
#include "amba_arch_mem.h"

#define IAV_MEM_ARB_BLUR_SIZE (0)
#define CONFIG_AMBARELLA_IAV_MULTI_COLOR_MASK_BUF_PITCH  (0)
#define CONFIG_AMBARELLA_IAV_MULTI_COLOR_MASK_BUF_HEIGHT (0)

/************************************************
 *
 * Following definitions can be modified.
 * They are software limitations based on different
 * NAND size and memory configurations.
 *
 ***********************************************/
/*
 * Force IDR limit, cannot insert faster than this LIMIT number of VSYNC
 */
#define IDR_INSERT_LIMIT			(2)

/*
 * Dump QP histogram, preview and ME1 buffer configurations
 */
#define CONFIG_DUMP_QP_HIST_INFO

/*
 * IAV debug print flag
 */
#define IAV_DEBUG_PRINT				(0)


/************************************************
 *
 * Following definitions CANNOT be modified !!
 * They are HW limitations !!
 *
 ***********************************************/

/*
 * Basic configuration
 */
#define PIXEL_IN_MB							(16)
#define PIXEL_IN_CTB						(32)
#define HEVC_STREAM_H_ALIGNMENT				(8)
#define FRAME_SIZE_UNIT						(32)
#define MAX_ENC_DUMMY_LATENCY				(5)
#define MAX_STR_DUMMY_LATENCY				(4)
#define HALF_SECOND_IN_MS					(500)
#define TWO_SECOND_IN_MS					(2000)
#define FIVE_SECOND_IN_MS					(5000)
#define TWO_SECONDS							(msecs_to_jiffies(2000))
#define FIVE_SECONDS						(msecs_to_jiffies(5000))
#define INVALID_DSP_PTS_32					(0xFFFFFFFF)
#define PTS_OVERFLOW_THRESHOLD				(1 << 28)
#define MAX_VCA_BUF_NUM						(4)
#define ENCODE_DURATION_FOREVER				(0xFFFFFFFF)

#define IAV_MIN_MANUAL_FEED_BUF_NUM			(4)
#define IAV_DEFAULT_MANUAL_FEED_BUF_NUM		(6)
#define IAV_MAX_MANUAL_FEED_BUF_NUM			(80)
#define IAV_MANUAL_FEED_WAIT_TIMEOUT		(12)
#define IAV_EXT_MEM_PADDING					(32)
#define IAV_INT_MEM_PADDING					(8)
#define IAV_SOF_EOF_PTS_QUEUE_DEPTH			(4)

/*
 * VP configuration
 */
#define DSP_VP_MSG_SIZE			(512)
#define VP_MSG_INFO_SIZE		(128)
#define DSP_VP_MSG_NUM			(128)

#if defined(CONFIG_ARCH_S6LM)
#define MAX_WIDTH_IN_FULL_FPS			(1504)
#define SRCBUF_MAX_WIDTH_IN_FULL_FPS	(MAX_WIDTH_IN_FULL_FPS)
#elif defined(CONFIG_ARCH_CV28)
#define MAX_WIDTH_IN_FULL_FPS			(1088)
#define SRCBUF_MAX_WIDTH_IN_FULL_FPS	(1920)
#else
#define MAX_WIDTH_IN_FULL_FPS			(2048)
#define SRCBUF_MAX_WIDTH_IN_FULL_FPS	(MAX_WIDTH_IN_FULL_FPS)
#endif

/*
 * RGB-IR Sensor config
 */
enum {
	IR_CHANNEL_INDEX = 0,
	RGB_CHANNEL_INDEX = 1,
};

typedef enum {
	IMG_CMD_SIZE = 128,

	IMG_BATCH_LISO_CMD_PER_PART = 5,
	IMG_BATCH_LISO_CMD_PART_SIZE = (IMG_CMD_SIZE * IMG_BATCH_LISO_CMD_PER_PART),
	IMG_BATCH_LISO_CMD_TOGGLE_NUM = 16,
	IMG_BATCH_LISO_CMD_TOTAL_SIZE = (IMG_BATCH_LISO_CMD_PART_SIZE *
		IMG_BATCH_LISO_CMD_TOGGLE_NUM * CONFIG_AMBARELLA_MAX_CHANNEL_NUM),

	IMG_BATCH_DEBUG_CMD_PER_PART = 2,
	IMG_BATCH_DEBUG_CMD_PART_SIZE = (IMG_CMD_SIZE * IMG_BATCH_DEBUG_CMD_PER_PART),
	IMG_BATCH_DEBUG_CMD_TOGGLE_NUM = 8,
	IMG_BATCH_DEBUG_CMD_TOTAL_SIZE = (IMG_BATCH_DEBUG_CMD_PART_SIZE *
		IMG_BATCH_DEBUG_CMD_TOGGLE_NUM * CONFIG_AMBARELLA_MAX_CHANNEL_NUM),
} IMG_MULTI_CHAN_PARAMS;

#define BUF_CAP_STITCH_PADDING				(32)

#define MIN_CRD_IN_MS						(4)
#define AUDIO_CLK_KHZ						(12288)
#define MIN_AUDIO_CLK_KHZ					(512)
#define MSEC_UNIT_TICKS						(AUDIO_CLK_KHZ)
#define PTS_CLK								(90000)

#define MIN_VIN_UPSAMPLE_FRAME_RATE_8FPS	(FPS_Q9_BASE / 8)
#define MIN_VIN_UPSAMPLE_FRAME_RATE_16FPS	(FPS_Q9_BASE / 16)

#define KByte(x)							((x) << 10)
#define MByte(x)							((x) << 20)
#define MByte_16(x)							((x) << 24)


/*
 * Encode configuration
 */
#define IAV_MAX_ENCODE_STREAMS_NUM			(13)
#define IAV_MAX_H26X_STREAMS_NUM_HIGH_MP	(5)
#define IAV_DEFAULT_ENCODE_STREAMS_NUM		(4)
#define IAV_MAX_EFM_STREAM_NUM				(4)
#define IAV_MAX_STATIS_NUM					(8)
#define STREAM_ID_MASK						((1U << IAV_MAX_ENCODE_STREAMS_NUM) - 1)
#define IAV_MAX_ENCODE_BITRATE				(16 * IAV_MAX_ENCODE_STREAMS_NUM * MB)
#define IAV_MAX_BLUR_COLOR_NUM				(16)

typedef enum {
	IAV_AISP_INPUT_WIDTH_1920 = 1920,
	IAV_AISP_INPUT_WIDTH_4K = 3840,
} IAV_AISP_INPUT_WIDTH;

typedef enum {
	IAV_PJPEG_WIDTH_SMALL = 1920,
	IAV_PJPEG_WIDTH_MEDIUM = 3072,

	IAV_PJPEG_MB_SMALL = 4,
	IAV_PJPEG_MB_MEDIUM = 6,
	IAV_PJPEG_MB_LARGE = 8,
} IAV_PJPEG_PARAM;

typedef enum {
	H26X_NUM_THR_WIDTH_L = 2688,
	H26X_NUM_THR_WIDTH_H = 3072,
} H26X_NUM_THR_WIDTH;

typedef enum {
	FAST_SEEK_INTVL_MAX = 63,
	MAX_REF_FRAME_INTVL = 3,
	MAX_ZMV_THRESHOLD = 255,
	MIN_INTRABIAS = 1,
	MAX_INTRABIAS = 4000,
	MIN_USER_BIAS = 0,
	MAX_USER_BIAS = 0xFFFF,
	MAX_FRAME_DROP_COUNT = 255,
	MAX_FRAME_TRIGGER_COUNT = 255,
	MAX_PSKIP_REPEAT = 254,
	MAX_SKIP_STRENGTH = 4,

	/* RC PARAM */
	H264_RC_CONST_QP = 37,
	H265_RC_CONST_QP = 37,

	/* QP ROI PARAM */
	ROI_CATEGORY_MIN = 0,
	ROI_CATEGORY_MAX_HEVC = 7,
	ROI_CATEGORY_MAX_AVC = 3,
	ROI_QP_ADJUST_MIN = -51,
	ROI_QP_ADJUST_MAX = 51,

	/* 3A statistics data PARAM */
	AAA_BUF_NUM_MIN = 4,
	AAA_VIN_STAT_NUM_MIN = 6,
#if CONFIG_AMBARELLA_MAX_VIN_WIDTH > (MAX_WIDTH_IN_FULL_FPS * 2)
	AAA_BUF_NUM_MAX = 48,
	AAA_VIN_STAT_NUM_MAX = 48,
#else
	AAA_BUF_NUM_MAX = 12,
	AAA_VIN_STAT_NUM_MAX = 18,
#endif
	AAA_BUF_NUM_DEF = AAA_BUF_NUM_MAX,
	AAA_VIN_STAT_NUM_DEF = AAA_VIN_STAT_NUM_MAX,
} IAV_ENC_CFG_PARAM;

typedef enum {
	IAV_EXTRA_DRAM_BUF_DEFAULT = 0,
	IAV_EXTRA_DRAM_BUF_MIN = -1,
	IAV_EXTRA_DRAM_BUF_MAX = 7,
} IAV_EXTRA_DRAM_BUF;

typedef enum {
	IAV_LUMA_LOG2_W_DEN_MAX = 7,
	IAV_LUMA_LOG2_W_DEN_MIN = 0,
	IAV_LUMA_WEIGHT_MAX = 127,
	IAV_LUMA_WEIGHT_MIN = -128,
	IAV_LUMA_OFFSET_MAX = 127,
	IAV_LUMA_OFFSET_MIN = -128,
} IAV_WP_PARAM;

/*
 * Encode performance load
 */
typedef enum {
	/* Encode performance in MB unit:
	 * 244800 = (1920/16) * (1088/16) * 30
	 * 285300 = (1920/16) * (1088/16) * 30 + (720/16) * (480/16) * 30
	 * 293460 = (1920/16) * (1088/16) * 31 + (720/16) * (480/16) * 30
	 * 298800 = (1920/16) * (1088/16) * 30 + (1280/16) * (720/16) * 15
	 * 306000 = (1920/16) * (1088/16) * 30 + (960/16) * (544/16) * 30
	 * 478800 = (2688/16) * (1520/16) * 30
	 * 488928 = (2048/16) * (1536/16) * 31 + (1280/16) * (720/16) * 30
	 * 501216 = (2048/16) * (1536/16) * 32 + (1280/16) * (720/16) * 30
	 * 519300 = (2688/16) * (1520/16) * 30 + (720/16) * (480/16) * 30
	 * 525792 = (2048/16) * (1536/16) * 34 + (1280/16) * (720/16) * 30
	 * 570600 = (1920/16) * (1088/16) * 60 + (720/16) * (480/16) * 60
	 * 648600 = (2688/16) * (1520/16) * 35 + (1280/16) * (720/16) * 25
	 * 653184 = (2592/16) * (1952/16) * 31 + (720/16) * (480/16) * 30
	 * 712476 = (2592/16) * (1952/16) * 34 + (720/16) * (480/16) * 30
	 * 720684 = (2592/16) * (1952/16) * 31 + (1280/16) * (720/16) * 30
	 * 737280 = (3072/16) * (2048/16) * 30
	 * 752400 = (3840/16) * (2160/16) * 21 + (1280/16) * (720/16) * 20
	 * 779976 = (2592/16) * (1952/16) * 34 + (1280/16) * (720/16) * 30
	 * 802356 = (3072/16) * (2048/16) * 31 + (720/16) * (480/16) * 30
	 * 849600 = (3840/16) * (2160/16) * 24 + (1280/16) * (720/16) * 20
	 * 857484 = (2592/16) * (1952/16) * 31 + (1920/16) * (1088/16) * 30
	 * 916776 = (2592/16) * (1952/16) * 34 + (1920/16) * (1088/16) * 30
	 * 932400 = (3840/16) * (2160/16) * 26 + (1280/16) * (720/16) * 25
	 * 972000 = (3840/16) * (2160/16) * 30
	 * 979200 = (1920/16) * (1088/16) * 120
	 * 1029600 = (3840/16) * (2160/16) * 29 + (1280/16) * (720/16) * 25
	 * 1168320 = (3008/16) * (3008/16) * 30 + (1280/16) * (720/16) * 30
	 * 1044900 = (3840/16) * (2160/16) * 31 + (720/16) * (480/16) * 30
	 * 1249200 = (3840/16) * (2160/16) * 31 + (1920/16) * (1088/16) * 30
	 * 1346400 = (3840/16) * (2160/16) * 34 + (1920/16) * (1088/16) * 30
	 * 1453125 = (4000/16) * (3000/16) * 31
	 * 1697925 = (4000/16) * (3000/16) * 31 + (1920/16) * (1088/16) * 30
	 * 2371680 = (2592/16) * (1952/16) * 120
	 * 599520 = (2048/16) * (1536/16) * 40 + (1280/16) * (720/16) * 30,
	 * 898560 = (2592/16) * (1952/16) * 40 + (1280/16) * (720/16) * 30,
	 * 1336500 = (3840/16) * (2160/16) * 40 + (720/16) * (480/16) * 30,
	 * 366900 = (1920/16) * (1088/16) * 40 + (720/16) * (480/16) * 30,
	 * 831060 = (2592/16) * (1952/16) * 40 + (720/16) * (480/16) * 30,
	 * 1035360 = (2592/16) * (1952/16) * 40 + (1920/16) * (1088/16) * 30,
	 * 1540800 = (3840/16) * (2160/16) * 40 + (1920/16) * (1088/16) * 30,
	 * 1044000 = (3840/16) * (2160/16) * 30 + (1280/16) * (720/16) * 20,
	 * 1078800 = (3840/16) * (2160/16) * 27 + (1920/16) * (1088/16) * 25,
	 * 1120500 = (3840/16) * (2160/16) * 30 + (1280/16) * (720/16) * 30 + (720/16) * (480/16) * 30,
	 * 1224000 = (3840/16) * (2160/16) * 35 + (1280/16) * (720/16) * 25,
	 * 1435200 = (3840/16) * (2160/16) * 38 + (1920/16) * (1088/16) * 25,
	 * 1944000 = (3840/16) * (2160/16) * 60,
	 * 2025000 = (3840/16) * (2160/16) * 60 + (720/16) * (480/16) * 60,
	 */
	LOAD_2MP30 = (1920 * 1088 / 256 * 30),
	LOAD_2MP90 = (1920 * 1088 / 256 * 90),
	LOAD_1080P30_480P30 = (1920 * 1088 / 256 * 30 + 720 * 480 / 256 * 30),
	LOAD_1080P31_480P30 = (1920 * 1088 / 256 * 31 + 720 * 480 / 256 * 30),
	LOAD_1080P30_720P15 = (1920 * 1088 / 256 * 30 + 1280 * 720 / 256 * 15),
	LOAD_1080P30_540P30 = (1920 * 1088 / 256 * 30 + 960 * 544 / 256 * 30),
	LOAD_4MP30 = (2688 * 1520 / 256 * 30),
	LOAD_3MP31_720P30 = (2048 * 1536 / 256) * 31 + (1280 * 720 / 256) * 30,
	LOAD_3MP32_720P30 = (2048 * 1536 / 256) * 32 + (1280 * 720 / 256) * 30,
	LOAD_3MP34_720P30 = (2048 * 1536 / 256) * 34 + (1280 * 720 / 256) * 30,
	LOAD_4MP30_480P30 = (2688 * 1520 / 256 * 30) + (720 * 480 / 256) * 30,
	LOAD_1080P60_480P60 = (1920 * 1088 / 256 * 60 + 720 * 480 / 256 * 60),
	LOAD_5MP31_480P30 = (2592 * 1952 / 256 * 31 + 720 * 480 / 256 * 30),
	LOAD_6MP30 = (3072 * 2048 / 256 * 30),
	LOAD_5MP31_720P30 = (2592 * 1952 / 256 * 31 + 1280 * 720 / 256 * 30),
	LOAD_5MP31_1080P30 = (2592 * 1952 / 256 * 31 + 1920 * 1088 / 256 * 30),
	LOAD_5MP34_480P30 = (2592 * 1952 / 256 * 34 + 720 * 480 / 256 * 30),
	LOAD_5MP35_480P30 = (2592 * 1952 / 256 * 35 + 720 * 480 / 256 * 30),
	LOAD_5MP34_720P30 = (2592 * 1952 / 256 * 34 + 1280 * 720 / 256 * 30),
	LOAD_5MP34_1080P30 = (2592 * 1952 / 256 * 34 + 1920 * 1088 / 256 * 30),
	LOAD_6MP31_480P30 = (3072 * 2048 / 256 * 31 + 720 * 480 / 256 * 30),
	LOAD_4KP30 = (3840 * 2160 / 256 * 30),
	LOAD_1080P120 = (1920 * 1088 / 256 * 120),
	LOAD_8MP30 = LOAD_1080P120,
	LOAD_4KP21_720P20 = (3840 * 2160 / 256 * 21 + 1280 * 720 / 256 * 20),
	LOAD_4KP24_720P20 = (3840 * 2160 / 256 * 24 + 1280 * 720 / 256 * 20),
	LOAD_4KP26_720P25 = (3840 * 2160 / 256 * 26 + 1280 * 720 / 256 * 25),
	LOAD_4KP29_720P25 = (3840 * 2160 / 256 * 29 + 1280 * 720 / 256 * 25),
	LOAD_9MP30_720P30 = (3008 * 3008 / 256 * 30 + 1280 * 720 / 256 * 30),
	LOAD_4KP27_1080P25 = (3840 * 2160 / 256 * 27 + 1920 * 1088 / 256 * 25),
	LOAD_4KP31_480P30 = (3840 * 2160 / 256 * 31 + 720 * 480 / 256 * 30),
	LOAD_4KP31_1080P30 = (3840 * 2160 / 256 * 31 + 1920 * 1088 / 256 * 30),
	LOAD_4KP34_1080P30 = (3840 * 2160 / 256 * 34 + 1920 * 1088 / 256 * 30),
	LOAD_12MP31 = (4000 * 3000 / 256 * 31),
	LOAD_12MP31_1080P30 = (4000 * 3000 / 256 * 31 + 1920 * 1088 / 256 * 30),
	LOAD_5MP120 = (2592 * 1952 / 256 * 30 * 4),
	LOAD_3MP40_720P30 = (2048 * 1536 / 256) * 40 + (1280 * 720 / 256) * 30,
	LOAD_4MP35_720P25 = (2688 * 1520 / 256) * 35 + (1280 * 720 / 256) * 25,
	LOAD_5MP40_720P30 = (2592 * 1952 / 256 * 40 + 1280 * 720 / 256 * 30),
	LOAD_4KP40_480P30 = (3840 * 2160 / 256 * 40 + 720 * 480 / 256 * 30),
	LOAD_1080P40_480P30 = (1920 * 1088 / 256 * 40 + 720 * 480 / 256 * 30),
	LOAD_5MP40_480P30 = (2592 * 1952 / 256 * 40 + 720 * 480 / 256 * 30),
	LOAD_5MP40_1080P30 = (2592 * 1952 / 256 * 40 + 1920 * 1088 / 256 * 30),
	LOAD_4KP30_720P20 = (3840 * 2160 / 256 * 30 + 1280 * 720 / 256 * 20),
	LOAD_4KP30_720P30_480P30 = (3840 * 2160 / 256 * 30 + 1280 * 720 / 256 * 30 + 720 * 480 / 256 * 30),
	LOAD_4KP35_720P25 = (3840 * 2160 / 256 * 35 + 1280 * 720 / 256 * 25),
	LOAD_4KP38_1080P25 = (3840 * 2160 / 256 * 38 + 1920 * 1088 / 256 * 25),
	LOAD_4KP40_1080P30 = (3840 * 2160 / 256 * 40 + 1920 * 1088 / 256 * 30),
	LOAD_4KP60 = (3840 * 2160 / 256 * 60),
	LOAD_4KP60_480P60 = (3840 * 2160 / 256 * 60 + 720 * 480 / 256 * 60),

	/* MJPEG maximum resolution */
	MAX_MJPEG_STM_RESO = ((16384 - 16) * (16384 - 16)) / 256,

	/*CV22 chip*/
	SYS_ENC_LOAD_CV22_55 = LOAD_5MP31_1080P30,
	SYS_ENC_LOAD_CV22_55_MAX = LOAD_5MP40_1080P30,
	SYS_ENC_LOAD_CV22_66 = LOAD_4KP31_1080P30,
	SYS_ENC_LOAD_CV22_66_MAX = LOAD_4KP40_1080P30,
	SYS_ENC_LOAD_CV22_88 = LOAD_9MP30_720P30,
	SYS_ENC_LOAD_CV22_98 = LOAD_4KP60_480P60,
	SYS_ENC_LOAD_CV22_98_MAX = LOAD_4KP60_480P60,
	SYS_ENC_LOAD_CV22_99 = LOAD_4KP60_480P60,
	SYS_ENC_LOAD_CV22_99_MAX = LOAD_4KP60_480P60,
	SYS_ENC_LOAD_CV22_55N = SYS_ENC_LOAD_CV22_55,
	SYS_ENC_LOAD_CV22_55N_MAX = SYS_ENC_LOAD_CV22_55_MAX,
	SYS_ENC_LOAD_CV22_66N = SYS_ENC_LOAD_CV22_66,
	SYS_ENC_LOAD_CV22_66N_MAX = SYS_ENC_LOAD_CV22_66_MAX,
	SYS_ENC_LOAD_CV22_88N = SYS_ENC_LOAD_CV22_88,
	SYS_ENC_LOAD_CV22_99N = SYS_ENC_LOAD_CV22_99,
	SYS_ENC_LOAD_CV22_99N_MAX = SYS_ENC_LOAD_CV22_99_MAX,

	MAX_STM_RESO_CV22_55 = 4096 * 3072 / 256,
	MAX_STM_RESO_CV22_66 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22_88 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22_98 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22_99 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22_55N =MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22_66N = MAX_STM_RESO_CV22_66,
	MAX_STM_RESO_CV22_88N = MAX_STM_RESO_CV22_88,
	MAX_STM_RESO_CV22_99N = MAX_STM_RESO_CV22_99,

	SYS_ENC_LOAD_CV22AQ_26 = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV22AQ_36 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV22AQ_76 = LOAD_2MP30 * 4,
	SYS_ENC_LOAD_CV22AQ_99 = LOAD_2MP30 * 4,
	SYS_ENC_LOAD_CV22AX_26 = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV22AX_36 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV22AX_76 = LOAD_2MP30 * 4,
	SYS_ENC_LOAD_CV22AX_99 = LOAD_2MP30 * 4,
	SYS_ENC_LOAD_CV22A_26  = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV22A_36  = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV22A_76  = LOAD_2MP30 * 4,
	SYS_ENC_LOAD_CV22A_99  = LOAD_2MP30 * 4,

	MAX_STM_RESO_CV22AQ_26 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22AQ_36 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22AQ_76 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22AQ_99 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22AX_26 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22AX_36 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22AX_76 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22AX_99 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22A_26  = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22A_36  = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22A_76 = MAX_STM_RESO_CV22_55,
	MAX_STM_RESO_CV22A_99 = MAX_STM_RESO_CV22_55,

	/* CV2 chip */
	SYS_ENC_LOAD_CV2_66 = LOAD_4KP31_1080P30,
	SYS_ENC_LOAD_CV2_66_MAX = LOAD_4KP40_1080P30,
	SYS_ENC_LOAD_CV2_99 = LOAD_5MP120,
	SYS_ENC_LOAD_CV2_55 = LOAD_5MP31_1080P30,
	SYS_ENC_LOAD_CV2_55_MAX = LOAD_5MP40_1080P30,
	SYS_ENC_LOAD_CV2_88 = LOAD_5MP120,

	MAX_STM_RESO_CV2_66 = 4096 * 3072 / 256,
	MAX_STM_RESO_CV2_88 = 7680 * 4320 / 256,
	MAX_STM_RESO_CV2_55 = MAX_STM_RESO_CV2_66,
	MAX_STM_RESO_CV2_99 = MAX_STM_RESO_CV2_88,

	SYS_ENC_LOAD_CV2AQ_76 = LOAD_2MP30 * 4,
	SYS_ENC_LOAD_CV2AQ_81 = LOAD_2MP30 * 6,
	SYS_ENC_LOAD_CV2AQ_86 = LOAD_2MP30 * 6,
	SYS_ENC_LOAD_CV2AX_81 = LOAD_2MP30 * 8,
	SYS_ENC_LOAD_CV2AX_86 = LOAD_2MP30 * 8,

	MAX_STM_RESO_CV2AQ_76 = MAX_STM_RESO_CV2_66,
	MAX_STM_RESO_CV2AQ_81 = MAX_STM_RESO_CV2_66,
	MAX_STM_RESO_CV2AQ_86 = MAX_STM_RESO_CV2_66,
	MAX_STM_RESO_CV2AX_81 = MAX_STM_RESO_CV2_66,
	MAX_STM_RESO_CV2AX_86 = MAX_STM_RESO_CV2_66,

	/* CV25 chip */
	SYS_ENC_LOAD_CV25_33 = LOAD_3MP31_720P30,
	SYS_ENC_LOAD_CV25_33_MAX = LOAD_3MP40_720P30,
	SYS_ENC_LOAD_CV25_33M = LOAD_3MP31_720P30,
	SYS_ENC_LOAD_CV25_33M_MAX = LOAD_3MP40_720P30,
	SYS_ENC_LOAD_CV25_55M = LOAD_5MP34_480P30,
	SYS_ENC_LOAD_CV25_55M_MAX = LOAD_5MP40_480P30,
	SYS_ENC_LOAD_CV25_99M = LOAD_5MP34_480P30,
	SYS_ENC_LOAD_CV25_99M_MAX = LOAD_5MP40_480P30,
	SYS_ENC_LOAD_CV25_66 = LOAD_5MP31_720P30,
	SYS_ENC_LOAD_CV25_66_MAX = LOAD_5MP40_720P30,
	SYS_ENC_LOAD_CV25_99 = LOAD_4KP30_720P30_480P30,
	SYS_ENC_LOAD_CV25_99_MAX = LOAD_4KP40_480P30,
	SYS_ENC_LOAD_CV25_88 = LOAD_4KP30_720P30_480P30,
	SYS_ENC_LOAD_CV25_88_MAX = LOAD_4KP40_480P30,
	SYS_ENC_LOAD_CV25_33MEX = LOAD_1080P31_480P30,
	SYS_ENC_LOAD_CV25_33MEX_MAX = LOAD_1080P40_480P30,
	SYS_ENC_LOAD_CV25_55MEX = LOAD_3MP31_720P30,
	SYS_ENC_LOAD_CV25_55MEX_MAX = LOAD_3MP34_720P30,

	MAX_STM_RESO_CV25_33 = 4096 * 3072 / 256,
	MAX_STM_RESO_CV25_66 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25_99 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25_88 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25_33M = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25_33MEX = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25_55M = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25_55MEX = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25_99M = MAX_STM_RESO_CV25_33,

	SYS_ENC_LOAD_CV25AQ_16 = 0,
	SYS_ENC_LOAD_CV25AQ_26 = LOAD_1080P30_480P30,
	SYS_ENC_LOAD_CV25AQ_36 = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV25AQ_76 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV25AQ_99 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV25AX_16 = 0,
	SYS_ENC_LOAD_CV25AX_26 = LOAD_1080P30_480P30,
	SYS_ENC_LOAD_CV25AX_36 = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV25AX_76 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV25AX_86 = LOAD_2MP30 * 4,
	SYS_ENC_LOAD_CV25AX_99 = LOAD_2MP30 * 4,
	SYS_ENC_LOAD_CV25AX_26M = SYS_ENC_LOAD_CV25AX_26,
	SYS_ENC_LOAD_CV25AX_36M = SYS_ENC_LOAD_CV25AX_36,
	SYS_ENC_LOAD_CV25A_16 = 0,
	SYS_ENC_LOAD_CV25A_26 = SYS_ENC_LOAD_CV25AX_26,
	SYS_ENC_LOAD_CV25A_36 = SYS_ENC_LOAD_CV25AX_36,
	SYS_ENC_LOAD_CV25A_76 = SYS_ENC_LOAD_CV25AX_76,
	SYS_ENC_LOAD_CV25A_86 = SYS_ENC_LOAD_CV25AX_86,
	SYS_ENC_LOAD_CV25A_99 = SYS_ENC_LOAD_CV25AX_99,
	SYS_ENC_LOAD_CV25A_26M = SYS_ENC_LOAD_CV25AX_26,
	SYS_ENC_LOAD_CV25A_36M = SYS_ENC_LOAD_CV25AX_36,
	SYS_ENC_LOAD_CV25A_30M = SYS_ENC_LOAD_CV25AX_26,

	MAX_STM_RESO_CV25AQ_16 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AQ_26 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AQ_36 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AQ_76 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AQ_99 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AX_16 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AX_26 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AX_36 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AX_76 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AX_86 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AX_99 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AX_26M = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25AX_36M = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_16 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_26 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_36 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_76 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_86 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_99 = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_26M = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_36M = MAX_STM_RESO_CV25_33,
	MAX_STM_RESO_CV25A_30M = MAX_STM_RESO_CV25_33,

	/* S6LM chip */
	SYS_ENC_LOAD_S6LM_22 = LOAD_1080P31_480P30,
	SYS_ENC_LOAD_S6LM_22_MAX = LOAD_1080P40_480P30,
	SYS_ENC_LOAD_S6LM_22EX = LOAD_1080P31_480P30,
	SYS_ENC_LOAD_S6LM_22EX_MAX = LOAD_1080P40_480P30,
	SYS_ENC_LOAD_S6LM_33 = LOAD_3MP31_720P30,
	SYS_ENC_LOAD_S6LM_33_MAX = LOAD_3MP40_720P30,
	SYS_ENC_LOAD_S6LM_55 = LOAD_2MP90,
	SYS_ENC_LOAD_S6LM_55_MAX = LOAD_5MP40_720P30,
	SYS_ENC_LOAD_S6LM_99 = LOAD_2MP90,
	SYS_ENC_LOAD_S6LM_99_MAX = LOAD_5MP40_720P30,

	MAX_STM_RESO_S6LM_22 = 4096 * 3072 / 256,
	MAX_STM_RESO_S6LM_33 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_S6LM_55 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_S6LM_99 = MAX_STM_RESO_S6LM_22,

	SYS_ENC_LOAD_H32AX_26 = LOAD_1080P31_480P30,
	SYS_ENC_LOAD_H32AX_36 = LOAD_1080P30_540P30 * 2,
	SYS_ENC_LOAD_H32AX_76 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_H32AQ_16 = 0,
	SYS_ENC_LOAD_H32AQ_26 = LOAD_1080P30_480P30,
	SYS_ENC_LOAD_H32AQ_36 = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_H32AQ_76 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_H32A_26 = SYS_ENC_LOAD_H32AX_26,
	SYS_ENC_LOAD_H32A_36 = SYS_ENC_LOAD_H32AX_36,
	SYS_ENC_LOAD_H32A_76 = SYS_ENC_LOAD_H32AX_76,

	MAX_STM_RESO_H32AX_26 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32AX_36 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32AX_76 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32AQ_16 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32AQ_26 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32AQ_36 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32AQ_76 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32A_26 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32A_36 = MAX_STM_RESO_S6LM_22,
	MAX_STM_RESO_H32A_76 = MAX_STM_RESO_S6LM_22,

	/* CV28 chip */
	SYS_ENC_LOAD_CV28_22M = LOAD_1080P31_480P30,
	SYS_ENC_LOAD_CV28_22M_MAX = LOAD_1080P40_480P30,
	SYS_ENC_LOAD_CV28_22M_TEST = LOAD_1080P31_480P30,
	SYS_ENC_LOAD_CV28_22M_TEST_MAX = LOAD_1080P40_480P30,
	SYS_ENC_LOAD_CV28_22MEX = LOAD_1080P31_480P30,
	SYS_ENC_LOAD_CV28_22MEX_MAX = LOAD_1080P40_480P30,
	SYS_ENC_LOAD_CV28_26MEX = LOAD_3MP32_720P30,
	SYS_ENC_LOAD_CV28_26MEX_MAX = LOAD_4MP35_720P25,
	SYS_ENC_LOAD_CV28_33M = LOAD_3MP32_720P30,
	SYS_ENC_LOAD_CV28_33M_MAX = LOAD_4MP35_720P25,
	SYS_ENC_LOAD_CV28_55M = LOAD_5MP31_480P30,
	SYS_ENC_LOAD_CV28_55M_MAX = LOAD_5MP35_480P30,
	SYS_ENC_LOAD_CV28_66M = LOAD_4KP31_480P30,
	SYS_ENC_LOAD_CV28_66M_MAX = LOAD_4KP40_480P30,
	SYS_ENC_LOAD_CV28_99M = LOAD_4KP31_480P30,
	SYS_ENC_LOAD_CV28_99M_MAX = LOAD_4KP40_480P30,

	MAX_STM_RESO_CV28_22M = 4096 * 3072 / 256,
	MAX_STM_RESO_CV28_22M_TEST = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28_22MEX = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28_26MEX = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28_33M = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28_55M = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28_66M = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28_99M = MAX_STM_RESO_CV28_22M,

	SYS_ENC_LOAD_CV28AX_26 = LOAD_1080P30_480P30,
	SYS_ENC_LOAD_CV28AX_26_MAX = LOAD_1080P30_480P30,
	SYS_ENC_LOAD_CV28AX_36 = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV28AX_36_MAX = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV28AX_76 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV28AX_76_MAX = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV28A_26 = LOAD_1080P30_480P30,
	SYS_ENC_LOAD_CV28A_26_MAX = LOAD_1080P30_480P30,
	SYS_ENC_LOAD_CV28A_36 = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV28A_36_MAX = LOAD_2MP30 * 2,
	SYS_ENC_LOAD_CV28A_76 = LOAD_2MP30 * 3,
	SYS_ENC_LOAD_CV28A_76_MAX = LOAD_2MP30 * 3,

	MAX_STM_RESO_CV28AX_26 = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28AX_36 = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28AX_76 = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28A_26 = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28A_36 = MAX_STM_RESO_CV28_22M,
	MAX_STM_RESO_CV28A_76 = MAX_STM_RESO_CV28_22M,

} IAV_SYS_ENC_LOAD;

/*
 * Resolution limit items
 */
typedef enum {
	RESOLUTION_LIMIT_WARP = 0,
	RESOLUTION_LIMIT_PYRAMID = 1,
	RESOLUTION_LIMIT_RAW = 2,
	RESOLUTION_LIMIT_EFM = 3,
	RESOLUTION_LIMIT_IMG_SCALE = 4,
	RESOLUTION_LIMIT_NUM = 5,
	RESOLUTION_LIMIT_FIRST = RESOLUTION_LIMIT_WARP,
	RESOLUTION_LIMIT_LAST = RESOLUTION_LIMIT_NUM,
} IAV_RESOLUTION_LIMIT;

/*
 * Encode resource limitation
 */
typedef enum {
	MIN_WIDTH_IN_STREAM = 320,
	MIN_WIDTH_IN_STREAM_ROTATE = 240,
	MIN_WIDTH_IN_ONE_TILE_HEVC = 256,
	MIN_HEIGHT_IN_STREAM = 180,
	MIN_WIDTH_IN_FUSION = 512,
	MIN_WIDTH_IN_MJPEG_STREAM = 64,
	MIN_HEIGHT_IN_MJPEG_STREAM = 64,

	MAX_WIDTH_IN_BUFFER = 4 * 1024,
	MAX_HEIGHT_IN_BUFFER = 4 * 1024,

	MIN_WARP_INPUT_WIDTH = 320,
	MAX_WIDTH_FOR_TWO_REF = 2560,
	MAX_WIDTH_FOR_B_FRAME = 1920,
	MAX_WIDTH_IN_S6LM_VIN = 3840,

	/* full frame rate mode for CFA */
	MAX_HEIGHT_IN_FULL_FPS = 2048,
	MIN_WIDTH_IN_FULL_FPS = MIN_WIDTH_IN_STREAM_ROTATE,
	MIN_HEIGHT_IN_FULL_FPS = MIN_HEIGHT_IN_STREAM,

	/* mutli-region warping mode for CFA */
	MIN_WIDTH_IN_WARP = 112,
	MIN_HEIGHT_IN_WARP = MIN_WIDTH_IN_WARP,

	/* high MP mode */
	/* MAX_WIDTH_IN_HIGH_MP and MAX_HEIGHT_IN_HIGH_MP are relevant to
	 * PM and SBP partitions in IAV memory (iav_config.h). */
	MAX_WIDTH_IN_HIGH_MP = ALIGN(CONFIG_AMBARELLA_MAX_VIN_WIDTH, 32),
	MAX_HEIGHT_IN_HIGH_MP = ALIGN(CONFIG_AMBARELLA_MAX_VIN_HEIGHT, 16),

	MIN_ME1_WIDTH_IN_HIGH_MP = 112,
	MIN_MAIN_WIDTH_IN_HIGH_MP = MIN_WIDTH_IN_STREAM_ROTATE,
	MIN_PREV_WIDTH_IN_HIGH_MP = MIN_WIDTH_IN_STREAM_ROTATE,
	MIN_HEIGHT_IN_HIGH_MP = MIN_HEIGHT_IN_STREAM,
} RESOLUTION_RESOURCE_LIMIT;

/*
 * DEBLOCKING filter limitation
 */
#define IAV_DEBLOCKING_ALPHA_MIN	(-6)
#define IAV_DEBLOCKING_ALPHA_MAX	(6)
#define IAV_DEBLOCKING_BETA_MIN		(-6)
#define IAV_DEBLOCKING_BETA_MAX		(6)

/*
 * Capture source buffer configuration
 */

typedef enum {
	MNBUF_MAX_ZOOMIN_FACTOR = 8,
	MNBUF_MAX_ZOOMOUT_FACTOR = 4,
	MNBUF_DIS_ZOOMOUT_FACTOR = 4,

	PCBUF_MAX_ZOOMIN_FACTOR = 1,
	PCBUF_MAX_ZOOMOUT_FACTOR = 16,

	PBBUF_MAX_ZOOMIN_FACTOR = 8,
	PBBUF_MAX_ZOOMOUT_FACTOR = 8,

	PABUF_MAX_ZOOMIN_FACTOR = 8,
	PABUF_MAX_ZOOMOUT_FACTOR = 16,

	PDBUF_MAX_ZOOMIN_FACTOR = 8,
	PDBUF_MAX_ZOOMOUT_FACTOR = 8,

	PEBUF_MAX_ZOOMIN_FACTOR = 8,
	PEBUF_MAX_ZOOMOUT_FACTOR = 8,

	PYRAMID_MAX_ZOOMIN_FACTOR = 1,
	PYRAMID_MAX_ZOOMOUT_FACTOR = 8,

	STITCH_MAX_ZOOMOUT_FACTOR = 6,
} SOURCE_BUFFER_ZOOM_FACTOR_LIMIT;


typedef enum {
	/*
	 * Resolution limitation for the 5 source buffers
	 */
	MNBUF_LIMIT_MAX_WIDTH = MAX_WIDTH_IN_HIGH_MP,
	MNBUF_LIMIT_MAX_HEIGHT = MAX_HEIGHT_IN_HIGH_MP,
	PCBUF_LIMIT_MAX_WIDTH = 720,
	PCBUF_LIMIT_MAX_HEIGHT = MAX_HEIGHT_IN_HIGH_MP,
	PBBUF_LIMIT_MAX_WIDTH = SRCBUF_MAX_WIDTH_IN_FULL_FPS,
	PBBUF_LIMIT_MAX_HEIGHT = MAX_HEIGHT_IN_HIGH_MP,
	PABUF_LIMIT_MAX_WIDTH = 1280,
	PABUF_LIMIT_MAX_HEIGHT = MAX_HEIGHT_IN_HIGH_MP,
	PDBUF_LIMIT_MAX_WIDTH = SRCBUF_MAX_WIDTH_IN_FULL_FPS,
	PDBUF_LIMIT_MAX_HEIGHT = MAX_HEIGHT_IN_HIGH_MP,
	PEBUF_LIMIT_MAX_WIDTH = SRCBUF_MAX_WIDTH_IN_FULL_FPS,
	PEBUF_LIMIT_MAX_HEIGHT = MAX_HEIGHT_IN_HIGH_MP,
} SOURCE_BUFFER_RESOLUTION_LIMIT;

/*
 * HDR configuration
 */
typedef enum {
	// Multi exposures supported in DSP
	MIN_HDR_EXPOSURES = 1,
	MAX_HDR_2X = 2,
	MAX_HDR_3X = 3,
	MAX_HDR_EXPOSURES = 4,
} IAV_HDR_PARAMS_LIMIT;

typedef enum {
	IAV_FRM_BUF_MIN_EMPTY_NUM = 2,
	IAV_FRM_BUF_MIN_BUF_NUM = 1,
	IAV_FRM_BUF_MAX_BUF_NUM = 10,
} IAV_FRM_BUF_PARAMS_LIMIT;

typedef enum {
	FRM_BUF_POOL_STATE_INIT_OK = 0,
	FRM_BUF_POOL_STATE_CREATE_OK = 1,
	FRM_BUF_POOL_STATE_WORKING_OK = 2,
} IAV_FRM_BUF_POOL_STATE;

/*
 * There are four state for each buffer in frame buffer pool.
 * 0.Released. The buffer has already feed to DSP and wait to be released by DSP.
 * 1.Requesting. The buffer is being requested from DSP.
 * 2.Requested. The buffer is allocated by DSP and ready for use.
 * 3.Occupied. The buffer has been occupied by user app.
 * The normal state flow: 0->1->2->3->0
 * Other flow:
 * 1) (1->0). If DSP has not enough buffer while requesting. The requesting will
 * failed and back from requesting to released state.
 * 2) (3->2). IAV will check recycle all occupied buffers from user and set them
 * to requested for next time asking from user.
 */

typedef enum {
	FRM_BUF_STATE_RELEASED = 0,
	FRM_BUF_STATE_REQUESTING = 1,
	FRM_BUF_STATE_REQUESTED = 2,
	FRM_BUF_STATE_USR_OCCUPIED = 3,
} IAV_FRM_BUF_STATE;

/*
 * Overlay memory configuration
 */
typedef enum {
	/* Overlay width for CV2x platforms shares the same line buffer width limit,
	 * and it cannot do stitching.
	 */
#if defined(CONFIG_ARCH_S6LM)
	OVERLAY_AREA_MAX_WIDTH = 1504,
#else
	OVERLAY_AREA_MAX_WIDTH = 1920,
#endif
	MAX_OVERLAY_SPLIT_AREA_NUM = 30,
	MAX_FASTOSD_STRING_LENGTH = 32,
	OVERLAY_CONTENT_SIZE = IAV_MEM_OVERLAY_SIZE,
	OVERLAY_CLUT_SIZE = 1024,

	OVERLAY_TOGGLE_NUM = 8,

	/* There are 32 overlay cmds in total, each has 20 Bytes.
	 * We may need to  Adjust this if DSP structure changes */
	OVERLAY_CMD_NUM = 32,
	OVERLAY_CMD_PART_SIZE = (20 * OVERLAY_CMD_NUM),
	OVERLAY_CMD_SIZE = (OVERLAY_CMD_PART_SIZE * OVERLAY_TOGGLE_NUM *
		IAV_MAX_ENCODE_STREAMS_NUM),

#ifdef CONFIG_AMBARELLA_IAV_DRAM_FASTOSD
	STRING_OSD_CMD_PART_SIZE = (20 * 32),
	STRING_OSD_CMD_SIZE = (STRING_OSD_CMD_PART_SIZE * OVERLAY_TOGGLE_NUM *
		IAV_MAX_ENCODE_STREAMS_NUM),
#else
	STRING_OSD_CMD_PART_SIZE = 0,
	STRING_OSD_CMD_SIZE = 0,
#endif

	OVERLAY_RSV_SIZE = OVERLAY_CMD_SIZE + STRING_OSD_CMD_SIZE,
} IAV_OVERLAY_PARAMS;

/*
 * Blur memory configuration
 */
typedef enum {
	BLUR_CONTENT_SIZE = IAV_MEM_BLUR_SIZE,
	BLUR_CLUT_SIZE = 1024,

	BLUR_TOGGLE_NUM = 8,

	BLUR_CLUT_TOTAL_SIZE = (IAV_MAX_BLUR_COLOR_NUM * BLUR_CLUT_SIZE),

	/* There are 16 blur cmds in total, each has 20 Bytes.
	 * We may need to  Adjust this if DSP structure changes */
	BLUR_CMD_SIZE = 20,
	BLUR_CMD_NUM = 16,
	BLUR_CMD_PART_SIZE = (BLUR_CMD_SIZE * BLUR_CMD_NUM),
	BLUR_CMD_BUF_SIZE = (BLUR_CMD_PART_SIZE * BLUR_TOGGLE_NUM *
		IAV_MAX_ENCODE_STREAMS_NUM),

	BLUR_RSV_SIZE = BLUR_CLUT_TOTAL_SIZE + BLUR_CMD_BUF_SIZE,

	BLUR_OPAQUE_COLOR_Y = (0x80),
#if defined(CONFIG_ARCH_S6LM)
	BLUR_AREA_MAX_WIDTH = 1504,
#else
	BLUR_AREA_MAX_WIDTH = 1920,
#endif
} IAV_BLUR_PARAMS;


/*
 * Multi channel memory configuration
 */
typedef enum {
	SUB_DSP_CMD_SIZE = 128,
	MAX_CANVAS_NUM = 12,
	CMD_NUM_PER_PART = 128,
	VIN_CMD_NUM_PER_PART = 6,
#if defined(CONFIG_ARCH_CV22)
	MAX_VIN_NUM = 2,
#elif defined(CONFIG_ARCH_CV2)
	MAX_VIN_NUM = 6,
#else
	MAX_VIN_NUM = 3,
#endif
	DSP_CHAN_INFO_NUM_PER_CHAN = 32,

	PROC_CHAN_BATCH_CMD_PART_SIZE = (SUB_DSP_CMD_SIZE * CMD_NUM_PER_PART),
	PROC_CHAN_BATCH_CMD_TOGGLE_NUM = 4,
	PROC_CHAN_BATCH_CMD_ALL_SIZE = (PROC_CHAN_BATCH_CMD_PART_SIZE *
		CONFIG_AMBARELLA_MAX_CHANNEL_NUM),

	PROC_CANVAS_BATCH_CMD_PART_SIZE = (SUB_DSP_CMD_SIZE * CMD_NUM_PER_PART),
	PROC_CANVAS_BATCH_CMD_TOGGLE_NUM = PROC_CHAN_BATCH_CMD_TOGGLE_NUM,
	PROC_CANVAS_BATCH_CMD_ALL_SIZE = (PROC_CANVAS_BATCH_CMD_PART_SIZE *
		MAX_CANVAS_NUM),

	PROC_VIN_BATCH_CMD_PART_SIZE = (SUB_DSP_CMD_SIZE * VIN_CMD_NUM_PER_PART * MAX_VIN_NUM),
	PROC_VIN_BATCH_CMD_TOGGLE_NUM = PROC_CHAN_BATCH_CMD_TOGGLE_NUM,
	PROC_VIN_BATCH_CMD_ALL_SIZE = (PROC_VIN_BATCH_CMD_PART_SIZE *
		PROC_VIN_BATCH_CMD_TOGGLE_NUM),

	PROC_CHAN_BATCH_CMD_OFFSET = 0,
	/* 32 is sizeof(DSP_SRCBUF_CFG), need to adjust if DSP stucture changes */
	CANVAS_BUF_CFG_SIZE = (32 * MAX_CANVAS_NUM),
	CANVAS_BUF_CFG_OFFSET = (PROC_CHAN_BATCH_CMD_OFFSET + PROC_CHAN_BATCH_CMD_ALL_SIZE),
	/* 64 is sizeof(EXT_MEM_CFG), need to adjust if DSP stucture changes */
	EXT_BUF_CFG_SIZE = (64 * CONFIG_AMBARELLA_MAX_CHANNEL_NUM),
	EXT_BUF_CFG_OFFSET = (CANVAS_BUF_CFG_OFFSET + CANVAS_BUF_CFG_SIZE),
	PROC_CANVAS_BATCH_CMD_OFFSET = (EXT_BUF_CFG_OFFSET + EXT_BUF_CFG_SIZE),
	PROC_VIN_BATCH_CMD_OFFSET = (PROC_CANVAS_BATCH_CMD_OFFSET + PROC_CANVAS_BATCH_CMD_ALL_SIZE),

	MULTI_CHAN_TOTAL_SIZE = (PROC_CHAN_BATCH_CMD_ALL_SIZE + CANVAS_BUF_CFG_SIZE +
		EXT_BUF_CFG_SIZE + PROC_CANVAS_BATCH_CMD_ALL_SIZE +
		PROC_VIN_BATCH_CMD_ALL_SIZE),

	/* CMD Bit Map */
	MULTI_CHAN_VCAP_SETUP_CMD = (1 << 0),
	MULTI_CHAN_VCAP_SCALE_SETUP_CMD = (1 << 1),
	MULTI_CHAN_WARP_CTRL_CMD = (1 << 2),
	MULTI_CHAN_PREV_SETUP_CMD = (1 << 3),
	MULTI_CHAN_PYRAMID_SETUP_CMD = (1 << 4),
	MULTI_CHAN_MASK_CMD = (1 << 5),
	MULTI_CHAN_BLEND_CMD = (1 << 6),
	CROSS_CHAN_PREV_SETUP_CMD = (1 << 7),
	NON_CROSS_CHAN_PREV_SETUP_CMD = (1 << 8),
	CROSS_CHAN_WARP_CTRL_CMD = (1 << 9),
	NON_CROSS_CHAN_WARP_CTRL_CMD = (1 << 10),
	CROSS_CHAN_ORDER_CMD = (1 << 11),
	CROSS_CHAN_MAIN_UPDATE_CMD = (1 << 12),
	NON_CROSS_CHAN_MAIN_UPDATE_CMD = (1 << 13),
	MULTI_CHAN_HDR_CMD = (1 << 14),
	MULTI_CHAN_IDSP_DEBUG_SETUP_CMD = (1 << 15),
	VIN_CONFIG_CMD = (1 << 16),
	VIN_GLOBAL_CONFIG_CMD = (1 << 17),
	VIN_MASTER_CONFIG_CMD = (1 << 18),
	VIN_SUBPIPE_CONFIG_CMD = (1 << 19),
	MULTI_CHAN_MULTI_REGION_WARP_SETUP_CMD = (1 << 20),
	MULTI_CHAN_MULTI_REGION_WARP_DPTZ_CMD = (1 << 21),
	ENC_SYNC_CMD = (1 << 22),
	MULTI_CHAN_RAW_WIN_CMD = (1 << 23),
	MULTI_CHAN_MULTI_COLOR_MASK_CMD = (1 << 24),
	MULTI_CHAN_TML_UPDATE_CMD = (1 << 25),
	MULTI_CHAN_VCAP_UPDATE_CMD = (1 << 26),
	MULTI_CHAN_TML_FUSION_CLUT_UPDATE_CMD = (1 << 27),
	VIN_DOWNSAMP_CONFIG_CMD = (1 << 28),
	VCAP_AISP_CMD = (1 << 29),

	CROSS_CHAN_CMD_ALL = (CROSS_CHAN_PREV_SETUP_CMD | CROSS_CHAN_WARP_CTRL_CMD |
		CROSS_CHAN_ORDER_CMD | CROSS_CHAN_MAIN_UPDATE_CMD),

	VIN_INFO_NUM = (PROC_CHAN_BATCH_CMD_TOGGLE_NUM * CONFIG_AMBARELLA_MAX_CHANNEL_NUM),
	CANVAS_INFO_NUM = (PROC_CHAN_BATCH_CMD_TOGGLE_NUM * MAX_CANVAS_NUM),
	CHAN_INFO_NUM = (DSP_CHAN_INFO_NUM_PER_CHAN * CONFIG_AMBARELLA_MAX_CHANNEL_NUM),
	IMG_STATS_NUM = (PROC_CHAN_BATCH_CMD_TOGGLE_NUM * CONFIG_AMBARELLA_MAX_CHANNEL_NUM),
	PYRAMID_INFO_NUM = 8,
	IDSP_DEBUG_BUF_NUM = 8,
	IDSP_INFO_BUF_NUM = 8,
	IMG_SCALE_INFO_NUM = 16,
	TML_INFO_BUF_NUM = 8,
	CUSTOM_PYRAMID_INFO_NUM = 16,

	VIN_INFO_FIFO_UNIT_SIZE = (64),
	SRCBUF_INFO_FIFO_UNIT_SIZE = (64),
	IMG_STATS_FIFO_UNIT_SIZE = (64),
	CHAN_INFO_FIFO_UNIT_SIZE = (64),
	IDSP_INFO_FIFO_UNIT_SIZE = (64),
	PYRAMID_INFO_FIFO_UNIT_SIZE = (128),
	IDSP_DEBUG_FIFO_UNIT_SIZE = (320),
	IDSP_FUSION_DEBUG_FIFO_UNIT_SIZE = (768),
	IMG_SCALE_FIFO_UNIT_SIZE = (64),
	IMG_SCALE_CFG_SIZE = (64),
	TML_INFO_FIFO_UNIT_SIZE = (64),
	CHAN_BLEND_FIFO_UNIT_SIZE = (64),
	CUSTOM_PYRAMID_CFG_SIZE = (64),
	CUSTOM_PYRAMID_FIFO_UNIT_SIZE = (320),
} IAV_MULTI_CHAN_PARAMS;
/*
 * Stream batch memory configuration
 */
typedef enum{
	PROC_ENC_BATCH_CMD_NUM_PER_PART = (32),
	PROC_ENC_BATCH_CMD_PART_SIZE = (SUB_DSP_CMD_SIZE * PROC_ENC_BATCH_CMD_NUM_PER_PART),
	PROC_ENC_BATCH_CMD_ALL_SIZE = (PROC_ENC_BATCH_CMD_PART_SIZE * IAV_MAX_ENCODE_STREAMS_NUM),

	PROC_ENC_BATCH_CMD_OFFSET = 0,

	ENC_BATCH_TOTAL_SIZE = PROC_ENC_BATCH_CMD_ALL_SIZE,

	ENC_SETUP_CMD = (1 << 0),
	ENC_START_CMD = (1 << 1),
	ENC_STOP_CMD = (1 << 2),
	ENC_OVERLAY_INSERT_CMD = (1 << 3),
	ENC_BLUR_INSERT_CMD = (1 << 4),
	ENC_REALTIME_ENCODE_SETUP = (1 << 5),
	ENC_DIS_CMD = (1 << 6),
} IAV_STREAM_PARAMS;
/*
 * Sync command memory configuration
 * layout:  |---frame/idsp sync---|
 *          |       reference     |
 *          |       cmd pool      |
 *          |---------------------|
 */
typedef enum {
	CMD_SYNC_CMD_SIZE = (128),
	CMD_SYNC_CMD_REF_SIZE = (sizeof(u32)),
	CMD_SYNC_REF_TABLE_TOGGLED_NUM = (8 * MAX_CANVAS_NUM),
	CMD_SYNC_REF_TABLE_SIZE = (CMD_SYNC_CMD_REF_SIZE * IAV_MAX_ENCODE_STREAMS_NUM),
	CMD_SYNC_REF_TABLE_TOTAL_SIZE = (CMD_SYNC_REF_TABLE_SIZE * CMD_SYNC_REF_TABLE_TOGGLED_NUM),
	CMD_SYNC_CMD_POOL_TOGGLED_NUM = (8 * IAV_MAX_ENCODE_STREAMS_NUM),
	CMD_SYNC_CMD_POOL_SIZE = (CMD_SYNC_CMD_POOL_TOGGLED_NUM * CMD_SYNC_CMD_SIZE),
	CMD_SYNC_TOTAL_SIZE = (CMD_SYNC_REF_TABLE_TOTAL_SIZE + CMD_SYNC_CMD_POOL_SIZE),
} IAV_CMD_SYNC_PARAMS;

/*
 * Stream Sync command memory configuration
 */
typedef enum {
	CMD_STREAM_SYNC_CMD_SIZE = (128),
	CMD_STREAM_SYNC_TOGGLED_NUM = (8),
	CMD_STREAM_SYNC_SIZE = (CMD_STREAM_SYNC_CMD_SIZE * IAV_MAX_ENCODE_STREAMS_NUM),
	CMD_STREAM_SYNC_TOTAL_SIZE = (CMD_STREAM_SYNC_SIZE * CMD_STREAM_SYNC_TOGGLED_NUM),
} IAV_CMD_STREAM_SYNC_PARAMS;

/*
 * BLEND ALPHA configuration
 */
typedef enum {
	IAV_BLEND_PADDING = 64,
	IAV_BLEND_ALPHA_PADDING_VALUE = 0xFF,
	IAV_BLEND_FIFO_NUM = 16,
	IAV_BLEND_FIFO_UNIT_SIZE = 64, //REPORT_INFO_FIFO_UNIT_SIZE
	IAV_BLEND_FIFO_SIZE = IAV_BLEND_FIFO_NUM * IAV_BLEND_FIFO_UNIT_SIZE,
	IAV_BLEND_ALPHA_TOGGLE_NUM = 3,
} IAV_STITCH_PARAMS;

/*
 * QP ROI matrix memory configuration
 */
typedef enum {
	/* 128K is the size of qp matrix for 4Kx2K */
	SINGLE_QP_MATRIX_SIZE = IAV_MEM_ROI_MATRIX_SIZE,
	STREAM_QP_MATRIX_NUM = IAV_ROI_NUM_FOR_IPB_FRAMES,
	STREAM_QP_MATRIX_SIZE = (SINGLE_QP_MATRIX_SIZE * STREAM_QP_MATRIX_NUM),
	QP_MATRIX_SIZE = (STREAM_QP_MATRIX_SIZE * IAV_MAX_ENCODE_STREAMS_NUM),
	UQP_NUM = (1),
	QP_MATRIX_TOGGLED_NUM = (4),
	/* 128KB * 8 * (1 + 4) = 5120 KB for 1 qp matrix */
	/* 128KB * 3 * 8 * (1 + 4) = 15360 KB for 3 qp matrixes */
	QP_MATRIX_TOTAL_SIZE = (QP_MATRIX_SIZE * (UQP_NUM + QP_MATRIX_TOGGLED_NUM)),

	QP_MATRIX_TOGGLED_NUM_PBG = (2),
	QP_MATRIX_SIZE_PBG = (SINGLE_QP_MATRIX_SIZE * IAV_MAX_ENCODE_STREAMS_NUM),
#ifdef CONFIG_AMBARELLA_IAV_ROI_PBG
	STREAM_QP_MATRIX_PBG = 1,
	/* 128KB * 8 * (1 + 2) = 3072 KB for 1 qp matrix per stream */
	QP_MATRIX_TOTAL_SIZE_PBG = (QP_MATRIX_SIZE_PBG * (1 + QP_MATRIX_TOGGLED_NUM_PBG)),
#else
	STREAM_QP_MATRIX_PBG = 0,
	QP_MATRIX_TOTAL_SIZE_PBG = 0,
#endif
} IAV_QPMATRIX_PARAMS;

/*
 * HEVC Scalelist Memory Configuration
 * */
typedef enum {
#ifdef CONFIG_AMBARELLA_IAV_HEVC_SCALELIST
	SINGLE_HEVC_SCALELIST_BUFFER_SIZE = (1 << 10),

#else
	SINGLE_HEVC_SCALELIST_BUFFER_SIZE = 0,
#endif
	HEVC_SCALELIST_BUFFER_SIZE = SINGLE_HEVC_SCALELIST_BUFFER_SIZE * IAV_MAX_ENCODE_STREAMS_NUM,
} IAV_HEVC_SCALELIST_PARAMS;

/*
 * Picture Statistics Memory Configuration
 * */
#define PIC_STATISTICS_SHIFT (13)
typedef enum {
	SINGLE_PIC_STAT_SIZE = (1U << PIC_STATISTICS_SHIFT),
	PIC_STAT_NUM = IAV_MAX_STATIS_NUM,
	PIC_STAT_STREAM_NUM = CONFIG_PIC_STATISTICS_DUMP_STREAM_NUM,
	STREAM_PIC_STAT_SIZE = (SINGLE_PIC_STAT_SIZE * PIC_STAT_NUM),
	PIC_STAT_SIZE = (STREAM_PIC_STAT_SIZE * PIC_STAT_STREAM_NUM),

	MAX_MV_STAT_STREAM_NUM = 5,
	MV_STAT_NUM = IAV_MAX_STATIS_NUM,
	MV_STAT_STREAM_NUM = IAV_MV_STREAM_NUM,
	STREAM_MV_STAT_SIZE = IAV_MEM_MV_SIZE,
	MV_STAT_SIZE = (STREAM_MV_STAT_SIZE * MV_STAT_STREAM_NUM),
} IAV_STAT_PARAMS;

/*
 * Single Color Privacy Mask Memory Configuration
 */
typedef enum {
	/* User Single Color Privacy Mask Partition */
	UPMP_NUM = 1,

	IAV_MASK_TOGGLE_NUM = 4,

	/* Single color privacy mask memory configuration */
	MASK_WIDTH_MAX = MAX_WIDTH_IN_HIGH_MP,
	MASK_HEIGHT_MAX = MAX_HEIGHT_IN_HIGH_MP,

	/* User Single Color Privacy Mask Partition */
	MASK_PARTITION_SIZE = PAGE_ALIGN(ALIGN(MASK_WIDTH_MAX / 8, 64) *
		MASK_HEIGHT_MAX),
	MASK_TOTAL_SIZE = (MASK_PARTITION_SIZE * (IAV_MASK_TOGGLE_NUM + UPMP_NUM) *
		CONFIG_AMBARELLA_MAX_CHANNEL_NUM),

	/**
	 * MASK MEMORY Layout:
	 *
	 *	 +--------------------+
	 *	 | User_0 | User_1 | User_(ChanNUM - 1) |
	 *	 +--------------------+
	 *	 | DSP0.0 | DSP0.1 | DSP0.2 | DSP0.(IAV_MASK_TOGGLE_NUM - 1) |
	 *	 +--------------------+
	 *	 | DSP1.0 | DSP1.1 | DSP1.2 | DSP1.(IAV_MASK_TOGGLE_NUM - 1) |
	 *	 +--------------------+
	 *	 | DSP(ChanNUM - 1).0 | DSP(ChanNUM - 1).1 | DSP(ChanNUM - 1).2 | DSP(ChanNUM - 1).(IAV_MASK_TOGGLE_NUM - 1) |
	 *	 +--------------------+
	 *
	 */
} IAV_SINGLE_COLOR_MASK_PARAMS;

/*
 * Multi Color Privacy Mask Memory Configuration
 */
typedef enum {
	/* User Clut8 Partition and Multi Color Privacy Mask Partition */
	USER_MULTI_COLOR_MASK_CLUT_NUM = 1,

	MULTI_COLOR_MASK_CLUT_SIZE = (256 * 4),
	MULTI_COLOR_MASK_CLUT_TOTAL_SIZE = (USER_MULTI_COLOR_MASK_CLUT_NUM * MULTI_COLOR_MASK_CLUT_SIZE),
	MULTI_COLOR_MASK_ALPHA_NONE_BLEND = 0,

	USER_MULTI_COLOR_MP_NUM = 1,

	IAV_MULTI_COLOR_MP_TOGGLE_NUM = 4,

	/* Multi Color privacy mask memory layout */
	MULTI_COLOR_MASK_BUF_PITCH = ALIGN(CONFIG_AMBARELLA_IAV_MULTI_COLOR_MASK_BUF_PITCH, 64),
	MULTI_COLOR_MASK_BUF_HEIGHT = CONFIG_AMBARELLA_IAV_MULTI_COLOR_MASK_BUF_HEIGHT,

	MULTI_COLOR_MASK_PARTITION_SIZE = PAGE_ALIGN(MULTI_COLOR_MASK_BUF_PITCH * MULTI_COLOR_MASK_BUF_HEIGHT),

	MULTI_COLOR_MASK_PARTITION_TOTAL_SIZE_PER_CHAN = MULTI_COLOR_MASK_PARTITION_SIZE * (IAV_MULTI_COLOR_MP_TOGGLE_NUM + USER_MULTI_COLOR_MP_NUM),

#if (CONFIG_AMBARELLA_IAV_MULTI_COLOR_MASK_BUF_PITCH && CONFIG_AMBARELLA_IAV_MULTI_COLOR_MASK_BUF_HEIGHT)
	MULTI_COLOR_MASK_TOTAL_SIZE = (MULTI_COLOR_MASK_PARTITION_TOTAL_SIZE_PER_CHAN *
		CONFIG_AMBARELLA_MAX_CHANNEL_NUM + MULTI_COLOR_MASK_CLUT_TOTAL_SIZE),
#else
	MULTI_COLOR_MASK_TOTAL_SIZE = 0,
#endif


	/**
	 * Multi Color Privacy Mask Memory Layout:
	 *
	 *	 +--------------------+
	 *	 | Clut Partition     |
	 *	 +--------------------+
	 *	 | User_0 | User_1 | User_(ChanNUM - 1) |
	 *	 +--------------------+
	 *	 | DSP0.0 | DSP0.1 | DSP0.2 | DSP0.(IAV_MULTI_COLOR_MP_TOGGLE_NUM - 1) |
	 *	 +--------------------+
	 *	 | DSP1.0 | DSP1.1 | DSP1.2 | DSP1.(IAV_MULTI_COLOR_MP_TOGGLE_NUM - 1) |
	 *	 +--------------------+
	 *	 | DSP(ChanNUM - 1).0 | DSP(ChanNUM - 1).1 | DSP(ChanNUM - 1).2 | DSP(ChanNUM - 1).(IAV_MULTI_COLOR_MP_TOGGLE_NUM - 1) |
	 *	 +--------------------+
	 *
	 */
} IAV_MULTI_COLOR_MASK_PARAMS;

/*
 * WARP Configuration
 */

/* Warp Memory Layout
|----------ch0----------|--------- ch1 ----------|
| WARP_VECT_PART_SIZE	| WARP_VECT_PART_SIZE	|
| area 0 : H				| area 0 : H				|
|             V				|             V				|
| area 1 : H				| area 1 : H				|
|             V				|             V				|
|	...					|	...					|
| area11: H				| area11: H				|
|             V				|             V				|
*/

typedef enum {
	VWARP_BLOCK_HEIGHT_MAX = 64,
	VWARP_BLOCK_HEIGHT_MAX_LDC = 32,
	VWARP_BLOCK_HEIGHT_MIN = 28,
	LDC_PADDING_WIDTH_MAX = 256,
	MIN_REGION_WIDTH_IN_WARP = 352,

	IAV_WARP_TOGGLE_NUM = 6,
	IAV_WARP_CMD_DELAY = 2,

	WARP_DEFAULT_AREA_NUM = 4,
	WARP_TABLE_AREA_MAX_NUM = 12,
	WARP_TABLE_AREA_MAX_WIDTH = 128,
	WARP_TABLE_AREA_MAX_WIDTH_LDC = WARP_TABLE_AREA_MAX_WIDTH,
	WARP_TABLE_AREA_MAX_HEIGHT = 96,
	WARP_TABLE_AREA_MAX_SIZE = WARP_TABLE_AREA_MAX_HEIGHT *
		WARP_TABLE_AREA_MAX_WIDTH,
	WARP_TABLE_AREA_MAX_SIZE_LDC = (WARP_TABLE_AREA_MAX_WIDTH_LDC
	    * WARP_TABLE_AREA_MAX_HEIGHT),
	/* User Warp Partition */
	UWARP_NUM = 1,
	WARP_VECT_PART_SIZE = (WARP_TABLE_AREA_MAX_NUM * \
		WARP_TABLE_AREA_MAX_SIZE * sizeof(s16) * 2),
	WARP_VECT_TOTAL_SIZE = CONFIG_AMBARELLA_MAX_CHANNEL_NUM * WARP_VECT_PART_SIZE *
		(IAV_WARP_TOGGLE_NUM + UWARP_NUM),

	WARP_BUFFER_TOTAL_SIZE = WARP_VECT_TOTAL_SIZE,
} IAV_WARP_PARAMS;

typedef enum {
	TML_FUSION_CLUT_SIZE = (256 * 4),

	USER_TML_FUSION_CLUT_NUM = 1,
	IAV_TML_FUSION_CLUT_TOGGLE_NUM = 4,
	TML_FUSION_CLUT_TOTAL_SIZE_PER_CHAN = TML_FUSION_CLUT_SIZE * (IAV_TML_FUSION_CLUT_TOGGLE_NUM + USER_TML_FUSION_CLUT_NUM),
	TML_FUSION_CLUT_TOTAL_SIZE = (TML_FUSION_CLUT_TOTAL_SIZE_PER_CHAN * CONFIG_AMBARELLA_MAX_CHANNEL_NUM),

	/**
	 * TML Fusion CLUT Memory Layout:
	 *
	 *	 +----------------------------------------------------------------------------------------------------------------------+
	 *	 |      User_0        |     User_1         |     User_2         |     User_(ChanNUM - 1)                                |
	 *	 +----------------------------------------------------------------------------------------------------------------------+
	 *	 |      DSP0.0        |     DSP0.1         |     DSP0.2         |     DSP0.(IAV_TML_FUSION_CLUT_TOGGLE_NUM - 1)         |
	 *	 +----------------------------------------------------------------------------------------------------------------------+
	 *	 |      DSP1.0        |     DSP1.1         |     DSP1.2         |     DSP1.(IAV_TML_FUSION_CLUT_TOGGLE_NUM - 1)         |
	 *	 +----------------------------------------------------------------------------------------------------------------------+
	 *	 | DSP(ChanNUM - 1).0 | DSP(ChanNUM - 1).1 | DSP(ChanNUM - 1).2 | DSP(ChanNUM - 1).(IAV_TML_FUSION_CLUT_TOGGLE_NUM - 1) |
	 *	 +----------------------------------------------------------------------------------------------------------------------+
	 *
	 */
} IAV_TML_FUSION_CLUT_PARAMS;

typedef enum {
	JPEG_QT_SIZE = 128,
	JPEG_QT_BUFFER_NUM = 4,
	JPEG_QT_TOTAL_SIZE = (IAV_MAX_ENCODE_STREAMS_NUM * JPEG_QT_SIZE * JPEG_QT_BUFFER_NUM),
} IAV_JPEG_QT_PARAMS;

/*
 * Dump YUV buffer / ME 1 buffer / histogram configurations
 */
typedef enum {
	NUM_QP_HISTOGRAM_BUF = 12,
} IAV_DUMP_BUFFER_PARAMS;

/*
 * Memory configuration
 */
typedef enum {
	IAV_DRAM_SIZE_1Gb = 0x1,
	IAV_DRAM_SIZE_2Gb = 0x2,
	IAV_DRAM_SIZE_4Gb = 0x4,
	IAV_DRAM_SIZE_8Gb = 0x8,
	IAV_DRAM_SIZE_16Gb = 0x10,

	/* All DRAM size must be aligned to PAGE size (4KB). */
	IAV_DRAM_INT_BSB = DSP_INT_BSB_SIZE,
	IAV_DRAM_BSB = DSP_BSB_SIZE,
	IAV_DRAM_USR = PAGE_ALIGN(IAV_MEM_USR_SIZE),
	IAV_DRAM_MV = PAGE_ALIGN(MV_STAT_SIZE),
	IAV_DRAM_STAT = PAGE_ALIGN(PIC_STAT_SIZE),
#if (IAV_MEM_OVERLAY_SIZE > 0)
	IAV_DRAM_OVERLAY = PAGE_ALIGN(OVERLAY_CONTENT_SIZE + OVERLAY_RSV_SIZE),
#else
	IAV_DRAM_OVERLAY = 0,
#endif
#if (IAV_MEM_BLUR_SIZE > 0)
	IAV_DRAM_BLUR = PAGE_ALIGN(BLUR_CONTENT_SIZE + BLUR_RSV_SIZE),
#else
	IAV_DRAM_BLUR = 0,
#endif
#if (IAV_MEM_ARB_BLUR_SIZE > 0)
	IAV_DRAM_ARB_BLUR = PAGE_ALIGN(IAV_MEM_ARB_BLUR_SIZE),
#else
	IAV_DRAM_ARB_BLUR = 0,
#endif
	IAV_DRAM_QPM = PAGE_ALIGN(QP_MATRIX_TOTAL_SIZE),
#ifdef CONFIG_AMBARELLA_IAV_HEVC_SCALELIST
	IAV_DRAM_HEVC_SCALELIST = PAGE_ALIGN(HEVC_SCALELIST_BUFFER_SIZE),
#else
	IAV_DRAM_HEVC_SCALELIST = 0,
#endif
	IAV_DRAM_PBG = PAGE_ALIGN(QP_MATRIX_TOTAL_SIZE_PBG),
	IAV_DRAM_WARP = PAGE_ALIGN(WARP_BUFFER_TOTAL_SIZE),
	IAV_DRAM_QUANT = PAGE_ALIGN(JPEG_QT_TOTAL_SIZE),
	IAV_DRAM_IMG = PAGE_ALIGN(TOTAL_IMG_SIZE),

	IAV_DRAM_MASK = PAGE_ALIGN(MASK_TOTAL_SIZE),

	IAV_DRAM_CMD_SYNC = PAGE_ALIGN(CMD_SYNC_TOTAL_SIZE),
	IAV_DRAM_CMD_STREAM_SYNC = PAGE_ALIGN(CMD_STREAM_SYNC_TOTAL_SIZE),
	IAV_DRAM_MULTI_CHAN = PAGE_ALIGN(MULTI_CHAN_TOTAL_SIZE),

	IAV_DRAM_STREAM = PAGE_ALIGN(ENC_BATCH_TOTAL_SIZE),

	IAV_DRAM_FB_DATA = PAGE_ALIGN(DSP_FASTDATA_SIZE),
	IAV_DRAM_FB_AUDIO = PAGE_ALIGN(DSP_FASTAUDIO_SIZE),

	IAV_DRAM_MULTI_COLOR_MASK = PAGE_ALIGN(MULTI_COLOR_MASK_TOTAL_SIZE),
	IAV_DRAM_TFC = PAGE_ALIGN(IAV_MEM_TFC_SIZE),

	IAV_DRAM_DIS_CTB_STAT = PAGE_ALIGN(IAV_MEM_DIS_CTB_STAT_SIZE),

	IAV_DRAM_MAX = IAV_DRAM_INT_BSB + IAV_DRAM_BSB + IAV_DRAM_USR + IAV_DRAM_MV + IAV_DRAM_STAT + IAV_DRAM_OVERLAY +
		IAV_DRAM_QPM + IAV_DRAM_PBG + IAV_DRAM_WARP + IAV_DRAM_QUANT + IAV_DRAM_IMG +
		IAV_DRAM_MASK + IAV_DRAM_CMD_SYNC * 2 + IAV_DRAM_CMD_STREAM_SYNC + IAV_DRAM_HEVC_SCALELIST +
		IAV_DRAM_MULTI_CHAN + IAV_DRAM_STREAM * 2 + IAV_DRAM_MULTI_COLOR_MASK,
} IAV_DRAM;

#define VOUT_OSD_BUF_MAX_DEFAULT_PITCH		(1920)	/* max bytes per line by default */
#define VOUT_OSD_BUF_MAX_1080P_8_BIT_PITCH	(1920)	/* max bytes per line for 1080p OSD with 8 bit */
#define VOUT_OSD_BUF_MAX_1080P_16_BIT_PITCH	(3840)	/* max bytes per line for 1080p OSD with 16 bit */
#define VOUT_OSD_BUF_MAX_1080P_32_BIT_PITCH	(7680)	/* max bytes per line for 1080p OSD with 32 bit */
#define VOUT_OSD_BUF_MAX_720P_16_BIT_PITCH	(2560)	/* max bytes per line for 720p OSD with 16 bit */


/* layout of IAV_PART_DSP_FIFO */
#define CFA_AAA_FIFO_NUM		(AAA_BUF_NUM_DEF)
#define RGB_AAA_FIFO_NUM		(AAA_BUF_NUM_DEF)
#define VIN_STATS_FIFO_NUM		(AAA_VIN_STAT_NUM_DEF)

#define DSP_VIN_FIFO_SIZE		(VIN_INFO_NUM * VIN_INFO_FIFO_UNIT_SIZE)
#define DSP_CANVAS_FIFO_SIZE		(CANVAS_INFO_NUM * SRCBUF_INFO_FIFO_UNIT_SIZE)
#define DSP_CHAN_INFO_FIFO_SIZE		(CHAN_INFO_NUM * CHAN_INFO_FIFO_UNIT_SIZE)
#define DSP_IMG_STATS_FIFO_SIZE		(IMG_STATS_NUM * IMG_STATS_FIFO_UNIT_SIZE)
#define DSP_CFA_AAA_FIFO_SIZE		(CFA_AAA_FIFO_NUM * CONFIG_AMBARELLA_MAX_CHANNEL_NUM * CFA_AAA_FIFO_UNIT_SIZE)
#define DSP_RGB_AAA_FIFO_SIZE		(RGB_AAA_FIFO_NUM * CONFIG_AMBARELLA_MAX_CHANNEL_NUM * RGB_AAA_FIFO_UNIT_SIZE)
#define DSP_VIN_STATS_FIFO_SIZE		(VIN_STATS_FIFO_NUM * CONFIG_AMBARELLA_MAX_CHANNEL_NUM * VIN_STATS_FIFO_UNIT_SIZE)
#define DSP_IK_DEBUG_FIFO_SIZE		(IDSP_DEBUG_BUF_NUM * CONFIG_AMBARELLA_MAX_CHANNEL_NUM * IDSP_DEBUG_FIFO_UNIT_SIZE)
#define DSP_IDSP_FIFO_SIZE		(IDSP_INFO_BUF_NUM * IDSP_INFO_FIFO_UNIT_SIZE)
#define DSP_PYRAMID_INFO_FIFO_SIZE	(PYRAMID_INFO_NUM * PYRAMID_INFO_FIFO_UNIT_SIZE)
#define DSP_IMG_SCALE_FIFO_SIZE		(IMG_SCALE_CFG_SIZE + IMG_SCALE_INFO_NUM * IMG_SCALE_FIFO_UNIT_SIZE)
#define DSP_TML_FIFO_SIZE		(TML_INFO_FIFO_UNIT_SIZE * TML_INFO_BUF_NUM)
#define DSP_CHAN_BLEND_FIFO_SIZE	(CHAN_BLEND_FIFO_UNIT_SIZE * IAV_BLEND_FIFO_NUM)
#define DSP_CUSTOM_PYRAMID_FIFO_SIZE		(CUSTOM_PYRAMID_CFG_SIZE + CUSTOM_PYRAMID_INFO_NUM *\
					CUSTOM_PYRAMID_FIFO_UNIT_SIZE)

#define DSP_FIFO_TOTAL_SIZE	(DSP_VIN_FIFO_SIZE + DSP_CANVAS_FIFO_SIZE +\
					DSP_CHAN_INFO_FIFO_SIZE + DSP_IMG_STATS_FIFO_SIZE + DSP_CFA_AAA_FIFO_SIZE +\
					DSP_RGB_AAA_FIFO_SIZE + DSP_VIN_STATS_FIFO_SIZE + DSP_IK_DEBUG_FIFO_SIZE +\
					DSP_IDSP_FIFO_SIZE + DSP_PYRAMID_INFO_FIFO_SIZE + DSP_IMG_SCALE_FIFO_SIZE +\
					DSP_TML_FIFO_SIZE + DSP_CHAN_BLEND_FIFO_SIZE + DSP_CUSTOM_PYRAMID_FIFO_SIZE)

/* layout of IAV_PART_IAV_RSV */
#define IAV_DRAM_STRM_CFG		(PAGE_ALIGN(sizeof(DSP_ENC_CFG) * IPCAM_RECORD_MAX_NUM_ENC))
#define IAV_DRAM_VIN_COMPAND_CFG	(PAGE_ALIGN(sizeof(u16) * COMP_LUT_ENTRY_NUM) * VIN_INSTANCES)
#define IAV_DRAM_VIN_DECOMPAND_CFG	(PAGE_ALIGN(sizeof(u32) * DECOMP_LUT_ENTRY_NUM) * VIN_INSTANCES)
#define IAV_DRAM_VIN_DIS_COEFF_CFG	(PAGE_ALIGN(sizeof(char) * 16))
#define IAV_DRAM_CUSTOM_PYRAMID_CFG	(PAGE_ALIGN(sizeof(pyramid_layer_cfg_t) * IAV_IMG_SCALE_Q_DEPTH_MAX))

#define IAV_RSV_BUF_SIZE		(IAV_DRAM_MULTI_CHAN + IAV_DRAM_STREAM * 3 + IAV_DRAM_CMD_SYNC * 2 + IAV_DRAM_CMD_STREAM_SYNC +\
				IAV_DRAM_STRM_CFG + IAV_DRAM_VIN_COMPAND_CFG + IAV_DRAM_VIN_DECOMPAND_CFG + IAV_DRAM_VIN_DIS_COEFF_CFG +\
				IAV_DRAM_CUSTOM_PYRAMID_CFG)

#define IAV_DRAM_MULTI_CHAN_OFFSET		(0)
#define IAV_DRAM_NON_SYNC_ENC_BATCH_OFFSET	(IAV_DRAM_MULTI_CHAN_OFFSET + IAV_DRAM_MULTI_CHAN)
#define IAV_DRAM_FRM_SYNC_ENC_BATCH_OFFSET	(IAV_DRAM_NON_SYNC_ENC_BATCH_OFFSET + IAV_DRAM_STREAM)
#define IAV_DRAM_IE_SYNC_ENC_BATCH_OFFSET	(IAV_DRAM_FRM_SYNC_ENC_BATCH_OFFSET + IAV_DRAM_STREAM)

#define IAV_DRAM_FRM_SYNC_CMD_OFFSET		(IAV_DRAM_IE_SYNC_ENC_BATCH_OFFSET + IAV_DRAM_STREAM)
#define IAV_DRAM_STRM_SYNC_CMD_OFFSET		(IAV_DRAM_FRM_SYNC_CMD_OFFSET + IAV_DRAM_CMD_SYNC)
#define IAV_DRAM_IE_SYNC_CMD_OFFSET			(IAV_DRAM_STRM_SYNC_CMD_OFFSET + IAV_DRAM_CMD_STREAM_SYNC)

#define IAV_DRAM_STRM_CFG_OFFSET			(IAV_DRAM_IE_SYNC_CMD_OFFSET + IAV_DRAM_CMD_SYNC)

#define IAV_DRAM_VIN_COMPAND_CFG_OFFSET		(IAV_DRAM_STRM_CFG_OFFSET + IAV_DRAM_STRM_CFG)
#define IAV_DRAM_VIN_DECOMPAND_CFG_OFFSET	(IAV_DRAM_VIN_COMPAND_CFG_OFFSET + IAV_DRAM_VIN_COMPAND_CFG)

#define IAV_DRAM_VIN_DIS_COEFF_CFG_OFFSET	(IAV_DRAM_VIN_DECOMPAND_CFG_OFFSET + IAV_DRAM_VIN_DECOMPAND_CFG)

#define IAV_DRAM_CUSTOM_PYRAMID_CFG_OFFSET	(IAV_DRAM_VIN_DIS_COEFF_CFG_OFFSET + IAV_DRAM_VIN_DIS_COEFF_CFG)

#define IAV_USR_BUF_OFFSET		(0)
#define IAV_MV_BUF_OFFSET		(IAV_USR_BUF_OFFSET + IAV_DRAM_USR)
#define IAV_OVERLAY_BUF_OFFSET		(IAV_MV_BUF_OFFSET + IAV_DRAM_MV)
#define IAV_BLUR_BUF_OFFSET		(IAV_OVERLAY_BUF_OFFSET + IAV_DRAM_OVERLAY)
#define IAV_ARB_BLUR_BUF_OFFSET		(IAV_BLUR_BUF_OFFSET + IAV_DRAM_BLUR)
#define IAV_QPM_BUF_OFFSET		(IAV_ARB_BLUR_BUF_OFFSET + IAV_DRAM_ARB_BLUR)
#define IAV_HEVC_SCALELIST_BUF_OFFSET	(IAV_QPM_BUF_OFFSET + IAV_DRAM_QPM)
#define IAV_WARP_BUF_OFFSET		(IAV_HEVC_SCALELIST_BUF_OFFSET + IAV_DRAM_HEVC_SCALELIST)
#define IAV_QUANT_BUF_OFFSET		(IAV_WARP_BUF_OFFSET + IAV_DRAM_WARP)
#define IAV_IMGPROC_OFFSET		(IAV_QUANT_BUF_OFFSET + IAV_DRAM_QUANT)
#define IAV_MASK_BUF_OFFSET		(IAV_IMGPROC_OFFSET + IAV_DRAM_IMG)
#define IAV_MULTI_COLOR_MASK_BUF_OFFSET	(IAV_MASK_BUF_OFFSET + IAV_DRAM_MASK)
#define IAV_EXTRA_RAW_BUF_OFFSET	(IAV_MULTI_COLOR_MASK_BUF_OFFSET + IAV_DRAM_MULTI_COLOR_MASK)
#define IAV_TFC_BUF_OFFSET		(IAV_EXTRA_RAW_BUF_OFFSET + IAV_EXTRA_RAW_SIZE)
#define IAV_STAT_BUF_OFFSET		(IAV_TFC_BUF_OFFSET + IAV_DRAM_TFC)
#define IAV_DSP_FIFO_OFFSET		(IAV_STAT_BUF_OFFSET + IAV_DRAM_STAT)
#define IAV_RSV_BUF_OFFSET		(IAV_DSP_FIFO_OFFSET + DSP_FIFO_TOTAL_SIZE)

#endif	// __IAV_CONFIG_H__

