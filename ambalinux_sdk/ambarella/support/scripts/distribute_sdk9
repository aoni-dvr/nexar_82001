#!/bin/bash
#

do_restore()
{
	# Restore
	cd $CWD

	if [ -e $AMBALINK_DIR/pkg/ambacv.orig ]; then
		rm -rf $AMBALINK_DIR/pkg/ambacv
		#mv $AMBALINK_DIR/pkg/ambacv $AMBALINK_DIR/pkg/ambacv.distribute
		mv $AMBALINK_DIR/pkg/ambacv.orig $AMBALINK_DIR/pkg/ambacv
	fi

	if [ -e $AMBALINK_DIR/ambarella/configs.orig ]; then
		rm -rf $AMBALINK_DIR/ambarella/configs
		mv $AMBALINK_DIR/ambarella/configs.orig $AMBALINK_DIR/ambarella/configs
	fi

	if [ -e $AMBALINK_DIR/ambarella/Makefile.orig ]; then
		cp $AMBALINK_DIR/ambarella/Makefile.orig $AMBALINK_DIR/ambarella/Makefile
		rm -f $AMBALINK_DIR/ambarella/Makefile.orig
	fi

	for i in ${AMBALINK_LINUX_CONFIG_PATH_BAK}; do
		if [ -e ${i}.orig ]; then
			cp ${i}.orig ${i}
			rm -f ${i}.orig
		fi
	done
}

clean_up()
{
	echo "distribute being terminated..."
	do_restore
	exit -1;
}

trap clean_up INT TERM HUP

if [ $# != 2 ]; then
    echo Usage: $0 [config] [target]
    exit -1
fi

. $1

if [ "$PATHS" = "" ]; then
    echo "\$PATHS must be specified!"
    exit -1
fi

if [ "$OUTPUT" = "" ]; then
    echo "\$OUTPUT must be specified!"
    exit -1
fi

CWD=$PWD
OUTPUT_DIR=${CWD}/${AMBALINK_DIR}/distribute
OUTPUT=${CWD}/${AMBALINK_DIR}/distribute/$OUTPUT
mkdir -p $OUTPUT_DIR
rm -f ${OUTPUT}
rm -rf $OUTPUT_DIR/external_sdk

# Prepare customer's Makefile
cp $AMBALINK_DIR/ambarella/Makefile $AMBALINK_DIR/ambarella/Makefile.orig
sed -i 's|)/../output$|)/../output.oem|g' $AMBALINK_DIR/ambarella/Makefile

#pre-download amba-made toolchain
eval `grep BR2_TOOLCHAIN_EXTERNAL_URL $AMBALINK_DIR/ambarella/configs/cv3_linux_cpio_defconfig`
if [ "${BR2_TOOLCHAIN_EXTERNAL_URL}" != "" ]; then
	curl ${BR2_TOOLCHAIN_EXTERNAL_URL} --create-dirs -o $AMBALINK_DIR/dl/toolchain-external-custom/`basename $BR2_TOOLCHAIN_EXTERNAL_URL`
fi

# configs
#todo: configs hard-coded flow
internal=${OUTPUT_DIR}/ambalinux_sdk.internal.`date +%Y%m%d`.tar.gz
tar zcf ${internal} $AMBALINK_DIR/ambarella/configs/
md5sum ${internal} > ${internal}.md5sum
AMBALINK_LINUX_CONFIG_PATH_BAK=""
rm -rf $AMBALINK_DIR/ambarella/configs.orig
cp -a $AMBALINK_DIR/ambarella/configs $AMBALINK_DIR/ambarella/configs.orig
rm -rf $AMBALINK_DIR/ambarella/configs
mkdir $AMBALINK_DIR/ambarella/configs
cd $AMBALINK_DIR/ambarella/
for i in ${CUSTOMER_CONFIGS}; do
	cp -v configs.orig/$i configs/
done
cd -

EXPANDED_EXCLUDE="
--exclude .git					\
--exclude .gitignore				\
--exclude MANIFEST.txt				\
--exclude configs.orig				\
--exclude $AMBALINK_DIR/ambarella/Makefile.orig	\
--exclude $AMBALINK_DIR/ambarella/.config		\
--exclude $AMBALINK_DIR/ambarella/.config.old	\
--exclude $AMBALINK_DIR/ambarella/..config.tmp	\
--exclude $AMBALINK_DIR/ambarella/.auto.deps	\
"

for i in ${EXCLUDE}; do
    EXPANDED_EXCLUDE=${EXPANDED_EXCLUDE}"--exclude ${i} "
done

for i in ${AMBALINK_LINUX_CONFIG_PATH_BAK}; do
    EXPANDED_EXCLUDE=${EXPANDED_EXCLUDE}"--exclude ${i}.orig "
done

##pkg/ambacv
if [ -e ${CWD}/${AMBALINK_DIR}/pkg/ambacv ]; then
	cd ${CWD}/${AMBALINK_DIR}/pkg/ambacv
	CV_PATH="${CV_API}"
	for i in ${CV_DIR}; do
		found_f=`find ${i} -maxdepth 1 -type f`
		found_l=`find ${i} -maxdepth 1 -type l`
		CV_PATH="${CV_PATH} ${found_f}  ${found_l}"
	done

	for i in ${CV_DIR_RECURSIVE}; do
		found_f=`find ${i} -type f`
		found_l=`find ${i} -type l`
		CV_PATH="${CV_PATH} ${found_f}  ${found_l}"
	done

	cd ${CWD}/${AMBALINK_DIR}/
	mv ${CWD}/${AMBALINK_DIR}/pkg/ambacv ${CWD}/${AMBALINK_DIR}/pkg/ambacv.orig
	EXPANDED_EXCLUDE=${EXPANDED_EXCLUDE}"--exclude ${AMBALINK_DIR}/pkg/ambacv.orig "
	mkdir ${CWD}/${AMBALINK_DIR}/pkg/ambacv
	cd ${CWD}/${AMBALINK_DIR}/pkg/ambacv

	#clone ambacv
	for i in ${CV_PATH}; do
		mkdir -p `dirname ${i}`
		cp -a ${CWD}/${AMBALINK_DIR}/pkg/ambacv.orig/${i} ${i}
	done

	#collect cv_common/libs/
	ARM_BIN=${CWD}/${AMBALINK_DIR}/output/${AMBA_OUT_TARGET}/host/usr/bin/aarch64-linux-gnu
	for i in ${CV_ARM_LOCAL_BUILD_LIBS}; do
		filename="${i##*/}"
		if [ -e ${CWD}/${AMBALINK_DIR}/output/${AMBA_OUT_TARGET}/diags/installer/ ]; then
			found=`find ${CWD}/${AMBALINK_DIR}/output/${AMBA_OUT_TARGET}/diags/installer -name ${filename}|tail -n 1`
		else
			found=""
		fi
		if [ "${found}" == "" ]; then
			found=`find ${CWD}/${AMBALINK_DIR}/output/${AMBA_OUT_TARGET}/diags -name ${filename}|tail -n 1`
		fi
		if [ "${found}" == "" ]; then
			echo -e "\e[1;31m cannot find ${filename} \e[0m"
		else
			mkdir -p `dirname ${i}`
			cp ${found} ${i}
			if [ "${found#*.}" == "a" ]; then
				${ARM_BIN}-strip --strip-debug ${i}
			fi
		fi
	done

	for i in ${CV_ORC_LOCAL_BUILD_LIBS}; do
		filename="${i##*/}"
		if [ -e ${CWD}/${AMBALINK_DIR}/output/${AMBA_OUT_TARGET}/diags/installer/ ]; then
			found=`find ${CWD}/${AMBALINK_DIR}/output/${AMBA_OUT_TARGET}/diags/installer -name ${filename}|tail -n 1`
		else
			found=""
		fi
		if [ "${found}" == "" ]; then
			found=`find ${CWD}/${AMBALINK_DIR}/output/${AMBA_OUT_TARGET}/diags -name ${filename}|tail -n 1`
		fi
		if [ "${found}" == "" ]; then
			echo -e "\e[1;31m cannot find ${filename} \e[0m"
		else
			mkdir -p `dirname ${i}`
			cp ${found} ${i}
			if [ "${found#*.}" == "a" ]; then
				vis-strip --strip-debug ${i}
			fi
		fi
	done

	#collect cv_common/bin/
	for i in ${CV_ARM_LOCAL_BUILD_BIN} ${CV_ORC_LOCAL_BUILD_BIN}; do
		filename="${i##*/}"
		found=`find ${CWD}/${AMBALINK_DIR}/output/${AMBA_OUT_TARGET}/build/ambacv-1.0/build/bin -name ${filename}|tail -n 1`
		if [ "${found}" == "" ]; then
			echo -e "\e[1;31m cannot find ${filename} \e[0m"
		else
			mkdir -p `dirname ${i}`
			cp ${found} ${i}
			if [ "${found#*.}" == "a" ]; then
				vis-strip --strip-debug ${i}
			fi
		fi
	done

	##configure
	#-diag_vp_cvtasks
	#+vp_cvtask_libs
	sed -i -e 's|lib_root="/cv1/sequence/test_sequence/release_lib/stable"|lib_root="$cv_common_dir/libs"|g' `find . -name configure.ac`
	sed -i -e 's|lib_root="/cv1/sequence/test_sequence/cv22_release_lib/latest"|lib_root="$cv_common_dir/libs"|g' `find . -name configure.ac`
	sed -i -e 's|lib_root="/cv1/sequence/test_sequence/cv2_release_lib/latest"|lib_root="$cv_common_dir/libs"|g' `find . -name configure.ac`
	sed -i -e 's|PREBUILDDIR := $(shell cat $(CMNDIR)/.release_lib_root)/arm/$(APP_TYPE)|PREBUILDDIR := $(CMNDIR)/libs/arm/$(APP_TYPE)|g' tests/common_arm.mk
	sed -i -e 's|PREBUILDDIR := $(shell cat $(CMNDIR)/.release_lib_root)/arm/linux|PREBUILDDIR := $(CMNDIR)/libs/arm/linux|g' arm_framework/linux.mk

	#orc_framework/Makefile.real.in
	sed -i -e 's|$(PPP) -M -deps|$(PPP) -perl ambperl -M -deps|g' orc_framework/Makefile.real.in
	sed -i -e 's|$(PPP) $(PPP_INCS) -o $@ $<|$(PPP) -perl ambperl $(PPP_INCS) -o $@ $<|g' orc_framework/Makefile.real.in

	#orc_framework/UcodeConfig.pm.in
	sed -i -e 's|-\*- perl -\*-|-\*- ambperl -\*-|g' orc_framework/UcodeConfig.pm.in

	#orc_framework/orcvp.mk
	sed -i -e 's|DIAG_DIR := $(AMBARELLA_PKG_DIR)/ambacv/tests/orc_scheduler|DIAG_DIR := $(AMBARELLA_PKG_DIR)/ambacv/cv_common/libs/orc\n\nifeq ($(PROJECT), cv6)\nORC_NAME = visorc\nelse\nORC_NAME = orcvp\nendif|g' orc_framework/orcvp.mk
	sed -i -e 's|cd $(BUILDDIR) && rm -rf orc_scheduler && $(MAKE) orc_scheduler-init && $(MAKE) orc_scheduler-build||g' orc_framework/orcvp.mk
	sed -i -e 's|$(BUILDDIR_ORCVP)/orcvp.bin|$(DIAG_DIR)/scheduler/$(PROJECT)_$(ORC_NAME)/orcvp.bin|g' orc_framework/orcvp.mk
	sed -i -e 's|$(BUILDDIR_CVTABLE)/visorc_cvtable.tbar|$(DIAG_DIR)/scheduler/$(PROJECT)_$(ORC_NAME)/visorc_cvtable.tbar|g' orc_framework/orcvp.mk

	#orc_framework/orcvp_ar.mk
	sed -i -e 's|DIAG_DIR := $(AMBARELLA_PKG_DIR)/ambacv/tests/orc_scheduler_ar|DIAG_DIR := $(AMBARELLA_PKG_DIR)/ambacv/cv_common/libs/orc\n\nifeq ($(PROJECT), cv6)\nORC_NAME = visorc\nelse\nORC_NAME = orcvp\nendif|g' orc_framework/orcvp_ar.mk
	sed -i -e 's|cd $(BUILDDIR) && rm -rf orc_scheduler_ar && $(MAKE) orc_scheduler_ar-init && $(MAKE) orc_scheduler_ar-build||g' orc_framework/orcvp_ar.mk
	sed -i -e 's|$(BUILDDIR_ORCVP)/orcvp.bin|$(DIAG_DIR)/scheduler/$(PROJECT)_$(ORC_NAME)/orcvp_ar/orcvp.bin|g' orc_framework/orcvp_ar.mk
	sed -i -e 's|$(BUILDDIR_CVTABLE)/visorc_cvtable.tbar|$(DIAG_DIR)/scheduler/$(PROJECT)_$(ORC_NAME)/orcvp_ar/visorc_cvtable.tbar|g' orc_framework/orcvp_ar.mk

	#orc_framework/flexidag/util/include.mk
	sed -i -e 's|flexidag/util/create_flexipatch.c|$(ORC_COMMON_DIR)/../flexidag/util/create_flexipatch|g' orc_framework/flexidag/util/include.mk
	sed -i -e 's|gcc -m32 -I./ -I$(CV_COMMON_DIR)/inc -I$(CV_COMMON_DIR)/inc/cvapi -o $@ $(filter %.c,$^)|cp $(FLEXIPATCH_SOURCES) $(FLEXIPATCH_TOOL)|g' orc_framework/flexidag/util/include.mk

	#cv_common/util/flexibin/include.mk
	sed -i -e 's|$(addprefix $(CV_COMMON_DIR)/$(FBC_DIR)/,$(my_SOURCES))|$(CV_COMMON_DIR)/$(FBC_DIR)/$(PROJECT)/flexibin_create|g' cv_common/util/flexibin/include.mk
	sed -i -e 's|gcc -o $@ $(filter %.c,$^) -I$(CV_COMMON_DIR)/inc -I$(CV_COMMON_DIR)/inc/cvapi -I$(CV_COMMON_DIR)/inc/cvsched_common -D$(CVCHIP)|cp $(FBC_SOURCES) $(FBC_TOOL)|g' cv_common/util/flexibin/include.mk

	cd $CWD
fi

echo Generating distribution package \'${OUTPUT}\' ...
OUTPUT_TAR=${OUTPUT%.*}
#clean_up
#exit 1

for i in ${PATHS};do
    tar --append --file=${OUTPUT_TAR} ${i} ${EXPANDED_EXCLUDE}
done

#echo Generating external_sdk distribution package \'${OUTPUT_DIR}/external_sdk\' ...
#mkdir -p ${OUTPUT_DIR}/external_sdk
#cd ${AMBALINK_DIR}/external_sdk/
#for i in `ls`; do
#	tar -zcf "${OUTPUT_DIR}/external_sdk/${i}.tar.gz" "${i}";
#done
#cd $CWD

gzip ${OUTPUT_TAR}

md5sum ${OUTPUT} > ${OUTPUT}.md5sum
echo Unarchiving distribution package \'${OUTPUT}\' ...
cd $OUTPUT_DIR
tar xfz ${OUTPUT}

do_restore

echo Done
echo "Your files are ready:"
echo "   ${OUTPUT}"
echo "   ${OUTPUT}.md5sum"
echo "Please double check its contents before actual distribution!"
echo "Good-day!"
