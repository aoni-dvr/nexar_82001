diff -urw dnsmasq-2.85.ori/src/dnsmasq.h dnsmasq-2.85/src/dnsmasq.h
--- dnsmasq-2.85.ori/src/dnsmasq.h	2021-04-08 04:39:39.000000000 +0800
+++ dnsmasq-2.85/src/dnsmasq.h	2021-07-07 22:14:50.291117423 +0800
@@ -270,7 +270,8 @@
 #define OPT_SINGLE_PORT    60
 #define OPT_LEASE_RENEW    61
 #define OPT_LOG_DEBUG      62
-#define OPT_LAST           63
+#define OPT_NODNS          63
+#define OPT_LAST           64
 
 #define OPTION_BITS (sizeof(unsigned int)*8)
 #define OPTION_SIZE ( (OPT_LAST/OPTION_BITS)+((OPT_LAST%OPTION_BITS)!=0) )
diff -urw dnsmasq-2.85.ori/src/option.c dnsmasq-2.85/src/option.c
--- dnsmasq-2.85.ori/src/option.c	2021-04-08 04:39:39.000000000 +0800
+++ dnsmasq-2.85/src/option.c	2021-07-07 22:15:44.324768641 +0800
@@ -170,6 +170,7 @@
 #define LOPT_PXE_VENDOR    361
 #define LOPT_DYNHOST       362
 #define LOPT_LOG_DEBUG     363
+#define LOPT_NODNS         364
  
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -343,6 +344,7 @@
     { "dumpfile", 1, 0, LOPT_DUMPFILE },
     { "dumpmask", 1, 0, LOPT_DUMPMASK },
     { "dhcp-ignore-clid", 0, 0,  LOPT_IGNORE_CLID },
+    { "nodns", 0, 0, LOPT_NODNS },
     { "dynamic-host", 1, 0, LOPT_DYNHOST },
     { "log-debug", 0, 0, LOPT_LOG_DEBUG },
     { NULL, 0, 0, 0 }
@@ -527,6 +529,7 @@
   { LOPT_DUMPFILE, ARG_ONE, "<path>", gettext_noop("Path to debug packet dump file"), NULL },
   { LOPT_DUMPMASK, ARG_ONE, "<hex>", gettext_noop("Mask which packets to dump"), NULL },
   { LOPT_SCRIPT_TIME, OPT_LEASE_RENEW, NULL, gettext_noop("Call dhcp-script when lease expiry changes."), NULL },
+  { LOPT_NODNS, OPT_NODNS, NULL, gettext_noop("Do not provide DHCP DNS address"), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
 
diff -urw dnsmasq-2.85.ori/src/rfc2131.c dnsmasq-2.85/src/rfc2131.c
--- dnsmasq-2.85.ori/src/rfc2131.c	2021-04-08 04:39:39.000000000 +0800
+++ dnsmasq-2.85/src/rfc2131.c	2021-07-07 22:16:33.547171072 +0800
@@ -68,6 +68,32 @@
 static void apply_delay(u32 xid, time_t recvtime, struct dhcp_netid *netid);
 static int is_pxe_client(struct dhcp_packet *mess, size_t sz, const char **pxe_vendor);
 
+static void connected_hook(void *addr, unsigned char *ext_mac,
+		       int mac_len, char *string, char *err, u32 xid)
+{
+  struct in_addr a;
+  char cmd[128];
+
+  if (!err && !option_bool(OPT_LOG_OPTS) && option_bool(OPT_QUIET_DHCP))
+    return;
+
+  /* addr may be misaligned */
+  if (addr)
+    memcpy(&a, addr, sizeof(a));
+
+  print_mac(daemon->namebuff, ext_mac, mac_len);
+
+  ///tmp/wifi_connected_hook.sh 192.168.42.2 78:54:2e:05:ae:98 TW-CCYAO
+  sprintf(cmd, "/tmp/wifi_connected_hook.sh %s%s%s %s%s",
+	       addr ? inet_ntoa(a) : "",
+	       addr ? " " : "",
+	       daemon->namebuff,
+	       string ? string : "",
+	       err ? err : "");
+  syslog(LOG_INFO, cmd);
+  system(cmd);
+}
+
 size_t dhcp_reply(struct dhcp_context *context, char *iface_name, int int_index,
 		  size_t sz, time_t now, int unicast_dest, int loopback,
 		  int *is_inform, int pxe, struct in_addr fallback, time_t recvtime)
@@ -1493,6 +1519,7 @@
 
 	  daemon->metrics[METRIC_DHCPACK]++;
 	  log_packet("DHCPACK", &mess->yiaddr, emac, emac_len, iface_name, hostname, NULL, mess->xid);  
+	  connected_hook(&mess->yiaddr, emac, emac_len, hostname, NULL, mess->xid);
 
 	  clear_packet(mess, end);
 	  option_put(mess, end, OPTION_MESSAGE_TYPE, 1, DHCPACK);
@@ -2546,11 +2573,13 @@
 	  !option_find2(OPTION_ROUTER))
 	option_put(mess, end, OPTION_ROUTER, INADDRSZ, ntohl(context->router.s_addr));
       
+      if (!option_bool(OPT_NODNS)) {
       if (daemon->port == NAMESERVER_PORT &&
 	  in_list(req_options, OPTION_DNSSERVER) &&
 	  !option_find2(OPTION_DNSSERVER))
 	option_put(mess, end, OPTION_DNSSERVER, INADDRSZ, ntohl(context->local.s_addr));
     }
+    }
 
   if (domain && in_list(req_options, OPTION_DOMAINNAME) && 
       !option_find2(OPTION_DOMAINNAME))
Only in dnsmasq-2.85/src: rfc2131.c.orig
