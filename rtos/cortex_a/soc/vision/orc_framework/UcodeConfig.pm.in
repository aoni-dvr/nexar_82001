# Copyright (c) 2017-2018 Ambarella, Inc.
#
# This file and its contents ("Software") are protected by intellectual
# property rights including, without limitation, U.S. and/or foreign copyrights.
# This Software is also the confidential and proprietary information of
# Ambarella, Inc. and its licensors.  You may not use, reproduce, disclose,
# distribute, modify, or otherwise prepare derivative works of this Software
# or any portion thereof except pursuant to a signed license agreement or
# nondisclosure agreement with Ambarella, Inc. or its authorized affiliates.
# In the absence of such an agreement, you agree to promptly notify and
# return this Software to Ambarella, Inc.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# -*- ambperl -*-

# This is ONLY needed for amalgam-based builds.  This is not compiled
# with binaries that run on physical hardware
#
package UcodeConfig;

use strict;
use Carp;
use Env qw ($SHELL $PROJECT);
require Exporter;

use TV2Load 'Ucode::DMA';
use TV2Load 'Ucode::RegHash';
use TV2Load 'PrintExp';

our @ISA = qw(Exporter);

our @EXPORT =
  qw(
     %Exp
     %Hex
     %Counters
     %StaticDregs
     %StaticSregs

     $Dalloc
     $Salloc
     %DB
     %SB

     rm_duplicate_regs

     print_config
  );

###############################################################################

make_printexp(our %Exp);
make_printhex(our %Hex);

###############################################################################
# Static resource allocation (counters and channels)
# These are required for common_dma-based utilities
our %StaticDregs =
  (
   # within an orc, these must be consecutive
   # orcme must be first (dreg allocator looks for it)
   orccode_common_dma_t0     => 248,  orccode_common_dma_base    => 248,
   orccode_common_dma_t1     => 249,
   orccode_common_dma_t2     => 250,
   orccode_common_dma_t3     => 251,
   orccode_common_dma_t4     => 252,
   orccode_common_dma_t5     => 253,
   orccode_common_dma_t6     => 254,
   orccode_common_dma_t7     => 255,
  );


# These are required for common_dma-based utilities
our %StaticSregs =
  (
   # within an orc, these must be consecutive
   orccode_common_dma_t0     => 248,  orccode_common_dma_base    => 248,
   orccode_common_dma_t1     => 249,
   orccode_common_dma_t2     => 250,
   orccode_common_dma_t3     => 251,
   orccode_common_dma_t4     => 252,
   orccode_common_dma_t5     => 253,
   orccode_common_dma_t6     => 254,
   orccode_common_dma_t7     => 255,
  );

###############################################################################
# Static Memory allocation
###############################################################################

our $Salloc = new_smem_allocator( startaddr => 0 );
our $Dalloc = new_dram_allocator( startaddr => 0x02000000 );

our %DB;
our %SB;

###############################################################################
# DRAM Buffers

$DB{encode_dynamic} =
  $Dalloc->new_buffer(name  => 'encode_dynamic',
		      ncols => 150 * 1024 * 1024,
		      nrows => 1);

###############################################################################
# SMEM Buffers

$SB{encode_thread_start} =
  $Salloc->new_buffer(name  => 'encode_thread_start',
		      ncols => 4 * 1, # 1 threads, 4 bytes per thread
		      nrows => 1);

$SB{encode_dynamic} =
  $Salloc->new_buffer(name  => 'encode_dynamic',
		      ncols => 1.5 * 1024 * 1024,
		      nrows => 1);

###############################################################################
# Utility Functions
###############################################################################

sub rm_duplicate_regs {
  my @regs;

  # take a list of regs, any element might be ref to a list, so we flatten
  foreach my $elem (@_) {
    if(ref $elem) {
      push @regs, @$elem;
    } else{
      push @regs, $elem;
    }
  }
  # filter out null-entries
  @regs = grep /\S/, @regs;

  my @sorted =
    map { "r$_" }
      sort { $a <=> $b }
	keys %{ { map { s/^[rm]//; $_ => 1} @regs  } };

  return @sorted;
}

###############################################################################
# Report on configuration
###############################################################################

sub print_config {

  print "DRAM Allocation\n";
  print $Dalloc->string();

  print "\n\n";

  print "SMEM Allocation\n";
  print $Salloc->string();

}

###############################################################################

1;
