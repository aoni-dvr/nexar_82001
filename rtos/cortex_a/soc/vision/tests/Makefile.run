# -*- makefile -*-

ifdef VERBOSE_TABLE_AR
TABLE_AR_FLAGS = -verbose
else
TABLE_AR_FLAGS =
endif

ifndef VERBOSE_MAKE
.SILENT:
endif

ifdef FORCE
  ifneq ($(FORCE),0)
FORCE_RULE = force
  endif
endif

INFILES = $(shell find $(SRCDIR) -name \*.in)

.PHONY: default all allrtl force ref		   \
	build code data checkdata preprtl	   \
	run runrtl check checkrtl compress	   \
	copyall copypass copyfail		   \
	clean cleancode cleanrun cleandata	   \
	clobber clobbercode clobberrun clobberdata 

default: build

all: build run check postproc

allrtl: build preprtl runrtl checkrtl postproc

$(SRCDIR)/configure : $(SRCDIR)/configure.ac
	cd $(SRCDIR) && autoconf

Makefile: $(INFILES) $(USER_CONFIG_DEPS) config.status
	./config.status

config.status: $(SRCDIR)/configure
	./config.status --recheck

build: code data checkdata

force:

ifndef USER_CODE_RULE
# Build diag code
code:
	@echo ""
	@echo "Building code"
	@echo ""
	$(MAKE) -C build
endif

ifndef USER_DATA_RULE
# Build data for run input
data:
endif

ifndef USER_CHECKDATA_RULE
# Build "golden" data to check against
checkdata:
endif

ifndef USER_PREPRTL_RULE
preprtl:
endif

ifndef USER_RUNRTL_RULE
runrtl:
	make -C rtl run
endif

ifndef USER_RUN_RULE
run:
	@echo ""
	@echo "Running amalgam"
	@echo ""
	cd amalgam;							\
	amalgam -logfile amalgam.log -nostdout -noct -command run;	\
	exit_code=$$?;							\
	echo "exit_status=$$exit_code" > amalgam.status;		\
	if [ $$exit_code != 0 ]; then					\
	  cat orc_printf.out | grep ERROR;				\
	  false;							\
	fi
endif

ifndef USER_CHECK_RULE
check: checkdata
	@echo "PASS: No data to check"
endif

ifndef USER_CHECKRTL_RULE
checkrtl: checkdata
	@echo "PASS: No data to check"
endif

ifndef USER_COMPRESS_RULE
compress:
	find . -type f -size +2048k | xargs -r gzip
endif

ifndef USER_COPYALL_RULE
# use find instead of * .* because .* picks up .., which is bad for rcp -r
copyall: compress
	rcp -r `find . -maxdepth 1 \! -name '.'` $(COPYDEST)
endif

ifndef USER_COPYPASS_RULE
copypass:
	cp -f $(DIAGSTATUSLOG) $(COPYDEST)
endif

ifndef USER_COPYFAIL_RULE
copyfail: copyall
endif


ifndef USER_POSTPROC_RULE
postproc:
endif

ifndef USER_CLEAN_CODE_RULE
cleancode:
	$(MAKE) -C build clean
endif

ifndef USER_CLEAN_RUN_RULE
ifneq ($(CLEAN_RUN_FILES),)
cleanrun:
	rm -rf $(CLEAN_RUN_FILES)
else
cleanrun:
endif
endif

ifndef USER_CLEANDATA_RULE
ifneq ($(CLEAN_DATA_FILES),)
cleandata:
	rm -rf $(CLEAN_DATA_FILES)
else
cleandata:
endif
endif

clean: cleancode cleanrun cleandata


ifndef USER_CLOBBER_CODE_RULE
clobbercode:
	$(MAKE) -C build clobber
endif

ifndef USER_CLOBBER_RUN_RULE
ifneq ($(CLOBBER_RUN_FILES),)
clobberrun:
	rm -rf $(CLOBBER_RUN_FILES)
else
clobberrun:
endif
endif

ifndef USER_CLOBBERDATA_RULE
ifneq ($(CLOBBER_DATA_FILES),)
clobberdata:
	rm -rf $(CLOBBER_DATA_FILES)
else
clobberdata:
endif
endif

clobber: clean clobbercode clobberrun clobberdata


SYSFLOW_TOOL   = $(shell tv2 -which sfc > /dev/null 2>&1; echo $$?)
ifeq ($(SYSFLOW_TOOL), 0)
	SYSFLOW_TOOL    = sfc
else
	SYSFLOW_TOOL    = sysflow_convert
endif

SFC_TOOL = $(SYSFLOW_TOOL)

unittest_systemflow.sfb : $(SRCDIR)/unittest_systemflow.csv
	@echo "  Building system flow table $@"
	$(SFC_TOOL) -I csv -O sfb $< > build/unittest_systemflow.sfb


