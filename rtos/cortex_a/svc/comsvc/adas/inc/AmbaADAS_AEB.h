/**
 *  @file AmbaADAS_AEB.h
 *
 * Copyright (c) 2021 Ambarella International LP
 *
 * This file and its contents ("Software") are protected by intellectual
 * property rights including, without limitation, U.S. and/or foreign
 * copyrights. This Software is also the confidential and proprietary
 * information of Ambarella International LP and its licensors. You may not use, reproduce,
 * disclose, distribute, modify, or otherwise prepare derivative works of this
 * Software or any portion thereof except pursuant to a signed license agreement
 * or nondisclosure agreement with Ambarella International LP or its authorized affiliates.
 * In the absence of such an agreement, you agree to promptly notify and return
 * this Software to Ambarella International LP.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
 * MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL AMBARELLA INTERNATIONAL LP OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *  @details Header file of Autonomous Emergency Braking
 *
 */

#ifndef AMBA_ADAS_AEB_H
#define AMBA_ADAS_AEB_H

#ifndef AMBA_SURROUND_H
#include "AmbaSurround.h"
#endif
#include "AmbaSR_Lane.h"


#define AMBA_ADAS_AEB_EVENT_UNACTIVE            (0U)   /**< Run AEB process unactive */
#define AMBA_ADAS_AEB_EVENT_NO_INTERVENTION     (1U)   /**< Run AEB process active and no intervention */
#define AMBA_ADAS_AEB_EVENT_DECELERATION        (2U)   /**< Run AEB process active and intervene to deceleration, no use in current version */
#define AMBA_ADAS_AEB_EVENT_STOP                (3U)   /**< Run AEB process active and intervene to brake to stop */

#define AMBA_ADAS_AEB_CFG_MODULE_ENABLE         (0U)   /**< Runtime config for module enable, refer to AMBA_ADAS_AEB_CFG_MODULE_ENABLE_s */

#define AMBA_ADAS_AEB_TARGET_MAX_NUMBER         (4U)   /**< Maximum number of targets of process output */

typedef struct {
    DOUBLE ActiveSpeed;                                /**< Operating speed, units: km/hr */
    DOUBLE MinAcceleration;                            /**< Allowed minimum acceleration (maximum deceleration) (i.e. negative for brake), no use in current version, units: m/s^2 */
} AMBA_ADAS_AEB_SPEC_s;

typedef struct {
    AMBA_VEHICLE_SYSTEM_SPEC_s SystemSpec;             /**< System spec */
    AMBA_VEHICLES_SIZE_s CarSize;                      /**< Subject car size, no use in current version */
    AMBA_VEHICLE_PHYSICAL_CTRL_s PhysicalCtrl;         /**< Physical control parameters, only use TireFriction in current version */
    AMBA_ADAS_AEB_SPEC_s AEBSpec;                      /**< AEB spec */
} AMBA_ADAS_AEB_CFG_s;

typedef struct {
    UINT32 Value;                                      /**< Valid for value 1 and invalid for value 0 */
} AMBA_ADAS_AEB_CFG_MODULE_ENABLE_s;

typedef struct {
    AMBA_SR_CANBUS_TRANSFER_DATA_s* pCANBusData;       /**< Canbus data */
    AMBA_SR_ROI_s* pODRoi;                             /**< OD Roi (coordinate need to be the same as pBbxList) */
    AMBA_OD_2DBBX_LIST_s* pBbxList;                    /**< Bbx list data */
    AMBA_SR_SROBJECT_DATA_s* pSurrData;                /**< SR object data */
    AMBA_SR_LANE_RECONSTRUCT_INFO_s* pSRLaneInfo;      /**< SR lane reconstruction information */
} AMBA_ADAS_AEB_PROC_IN_s;

typedef struct {
    UINT32 Valid;                                      /**< Target's valid situation; valid for value 1 and invalid for value 0 */
    UINT32 ID;                                         /**< Target's ID */
    UINT32 Category;                                   /**< Target's category generated by NN */
    DOUBLE Size[3];                                    /**< Target's size (width,lengh,height), units: mm */
    DOUBLE Coordinate[3];                              /**< Target's world coordinate; Coordinate[0]: midpoint X, Coordinate[1]: minimum Y, Coordinate[2]: 0, units: mm */
    UINT32 RelativeSpeedFlag;                          /**< Target's flag of relative speed; valid for value 1 and invalid for value 0 */
    DOUBLE RelativeSpeed;                              /**< Target's relative speed, units: km/hr */
    DOUBLE RelativeDirection[2];                       /**< Target's direction of relative speed in unit vector(x,y) */
    UINT32 RealSpeedFlag;                              /**< Target's flag of real speed; valid for value 1 and invalid for value 0 */
    DOUBLE RealSpeed;                                  /**< Target's real speed, units: km/hr */
    DOUBLE RealDirection[2];                           /**< Target's direction of real speed in unit vector(x,y) */
    DOUBLE TTC;                                        /**< Target's time to collision, units: msec */
} AMBA_ADAS_AEB_TARGET_STATE_s;

typedef struct {
    UINT32 Event;                                      /**< Event, please refer to AMBA_ADAS_AEB_EVENT_XXX */
    DOUBLE ReqBrakeDist;                               /**< Required brake distance of subject car, only valid when Event is AMBA_ADAS_AEB_EVENT_STOP */
    DOUBLE ReqAcceleration;                            /**< Required acceleration of subject car, valid when Event is AMBA_ADAS_AEB_EVENT_STOP or AMBA_ADAS_AEB_EVENT_DECELERATION */
    DOUBLE ReqSpeed;                                   /**< Required speed of subject car, valid when Event is AMBA_ADAS_AEB_EVENT_STOP or AMBA_ADAS_AEB_EVENT_DECELERATION */
    UINT8 HitValid;                                    /**< Valid hit of subject car, 1 for hit and 0 for non-impact */
} AMBA_ADAS_AEB_SUBJECT_STATE_s;

typedef struct {
    UINT32 CapTS;                                      /**< Capture time stamp of system */
    AMBA_ADAS_AEB_TARGET_STATE_s TargetState[AMBA_ADAS_AEB_TARGET_MAX_NUMBER];       /**< State of target objects, only TargetState[0] is valid in current version */
    AMBA_ADAS_AEB_SUBJECT_STATE_s SubjectState;        /**< State of subject car */
} AMBA_ADAS_AEB_PROC_OUT_s;


UINT32 AmbaADAS_AEB_GetDefaultConfig(AMBA_ADAS_AEB_CFG_s* pAEBCfg);

UINT32 AmbaADAS_AEB_Init(const AMBA_ADAS_AEB_CFG_s* pAEBCfg);

UINT32 AmbaADAS_AEB_SetConfig(UINT32 CfgId, const void* pCfgVal);

UINT32 AmbaADAS_AEB_GetConfig(UINT32 CfgId, void* pCfgVal);

UINT32 AmbaADAS_AEB_Process(const AMBA_ADAS_AEB_PROC_IN_s* pIn, AMBA_ADAS_AEB_PROC_OUT_s* pOut);


#endif //AMBA_ADAS_AEB_H
