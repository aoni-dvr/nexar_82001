/**
 * @file SvcFormat.h
 *
 * Copyright (c) 2019 Ambarella International LP
 *
 * This file and its contents ("Software") are protected by intellectual
 * property rights including, without limitation, U.S. and/or foreign
 * copyrights. This Software is also the confidential and proprietary
 * information of Ambarella International LP and its licensors. You may not use, reproduce,
 * disclose, distribute, modify, or otherwise prepare derivative works of this
 * Software or any portion thereof except pursuant to a signed license agreement
 * or nondisclosure agreement with Ambarella International LP or its authorized affiliates.
 * In the absence of such an agreement, you agree to promptly notify and return
 * this Software to Ambarella International LP.
 *
 * This file includes sample code and is only for internal testing and evaluation.  If you
 * distribute this sample code (whether in source, object, or binary code form), it will be
 * without any warranty or indemnity protection from Ambarella International LP or its affiliates.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
 * MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL AMBARELLA INTERNATIONAL LP OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */
#ifndef CONTAINER_FORMAT_H
#define CONTAINER_FORMAT_H

/**
 * Media container implementation
 *
 * The definition of common functions and common media containers
 */

#include "stream/SvcStream.h"
#include "SvcFIFO.h"

/** Include private data */
#include "format/SvcIso.h"
#include "format/SvcExif.h"

/**
 * The macro to check if the frame is a EOS frame
 */
static inline UINT32 SVC_FORMAT_IS_EOS_FRAME(const SVC_FIFO_BITS_DESC_s *X)
{
    UINT32 Rval;
    if ((X)->Size == SVC_FIFO_MARK_EOS) {
        Rval = 1U;
    } else {
        Rval = 0U;
    }
    return Rval;
}

/**
 * The macro to calculate the duration by the frame count and frame delta
 */
static inline UINT64 SVC_FORMAT_DURATION(UINT64 Fno, UINT64 Delta)
{
    return Fno * Delta;
}

/**
 * Format direction
 * The item is used in Demuxing/Editing Format modules. In Demuxing Format modules, it indicates a demuxing direction. In Editing Format modules, it indicates the directions of file reading and index.
 */
#define SVC_FORMAT_DIR_FORWARD     (0x00U) /**< Forward direction */
#define SVC_FORMAT_DIR_BACKWARD    (0x01U) /**< Backward direction */

/**
 * Media Info type
 */
#define SVC_MEDIA_INFO_MOVIE   (0x01U) /**< Movie Info type */
#define SVC_MEDIA_INFO_IMAGE   (0x02U) /**< Image Info type */

/**
 * Video mode
 */
#define SVC_VIDEO_MODE_P               (0U)    /**< Progressive */
#define SVC_VIDEO_MODE_I_A_FRM_PER_SMP (1U)    /**< Frame per sample */
#define SVC_VIDEO_MODE_I_A_FLD_PER_SMP (2U)    /**< Field per sample */

/**
 * General Media track information
 */
typedef struct {
    UINT8 MediaId;              /**< The media type of the track (The ID is a media ID. See SVC_FORMAT_MID_e.) */
    UINT32 TimeScale;           /**< The ticks per second */
    UINT32 OrigTimeScale;       /**< The original TimeScale */
    UINT32 TimePerFrame;        /**< The ticks per frame */
    UINT32 FrameNo;             /**< Frame number (It is a logical number. In muxing or demuxing, the value is the frame number handled currently. If Demuxer is forward demuxing, the number will progressively increases. If Demuxer is backward demuxing, the number will progressively decreases.) */
    UINT32 FrameCount;          /**< The count of frames in the track */
    UINT64 InitDTS;             /**< The initial value of the DTS (If a file is a split file, this specifies the start decode offset which the value generated by the previous clip.) */
    UINT64 DTS;                 /**< Decode time stamp (The value is based on the time scale of the track. In Muxer, the value is the DTS of next frame; in Demuxer, the value is the duration of the track.) */
    UINT64 NextDTS;             /**< Next Decode time stamp (In Muxer, it predicates the DTS of the next frame. In Demuxer, the value is the same as DTS.) */
    SVC_FIFO_HDLR_s *Fifo;      /**< The FIFO handler of the track (Each track has an individual FIFO handler.) */
    UINT8 *BufferBase;          /**< The start address of the FIFO buffer (Users push data to the FIFO, the FIFO will write the data to its buffer according to the address.) */
    UINT32 BufferSize;          /**< The size of FIFO buffer */
} SVC_MEDIA_TRACK_GENERAL_INFO_s;

/**
 * Video track information
 */
typedef struct {
    SVC_MEDIA_TRACK_GENERAL_INFO_s Info;    /**< The general track information */
    UINT32 GOPSize;                         /**< The number of pictures between IDR pictures */
    UINT32 AccumFrameSize;                  /**< The accumulated size for storing multi-tiles frame */
    UINT16 PixelArX;                        /**< The aspect ratio X of the pixel (If the value is not 1, it means the pixel is not square.) */
    UINT16 PixelArY;                        /**< The aspect ratio Y of the pixel (if the value is not 1, it means the pixel is not square.) */
    UINT16 Width;                           /**< Video width */
    UINT16 Height;                          /**< Video height */
    UINT16 M;                               /**< The number of pictures between reference pictures (IDR, I, P) */
    UINT16 N;                               /**< The number of pictures between I pictures */
    UINT16 SliceIdx;                        /**< The parameter for storing current slice id */
    UINT8 IsDefault;                        /**< The flag indicating the track is the default video track  */
    UINT8 Mode;                             /**< The value indicating the picture mode of the video (It has progressive and interlaced modes. Interlaced mode has Field Per Sample and Frame Per Sample. See AMBA_VIDEO_MODE_XXX.) */
    UINT8 Rotation;                         /**< The rotation of the video track */
    UINT8 CaptureTimeMode;                  /**< Capture time mode. 0: Disable, 1: Enable */
    UINT32 CaptureTimeScale;                /**< Time scale of capture timestamp */
    UINT64 InitCaptureTime;                 /**< Capture timestamp */
    UINT64 PastDTS;                         /**< DTS before Auto Split. */
} SVC_VIDEO_TRACK_INFO_s;

/**
 * Audio track information
 */
typedef struct {
    SVC_MEDIA_TRACK_GENERAL_INFO_s Info;    /**< The general track information */
    UINT32 SampleRate;                      /**< The sample rate (Hz) of the audio track */
    UINT8 IsDefault;                        /**< The flag indicating the track is the default audio track */
    UINT8 Channels;                         /**< The number of channels in the audio track */
    UINT8 BitsPerSample;                    /**< The bits per sample of the audio track (e.g., 8 bits and 16 bits) */
    UINT8 Endian;                           /**< The endian type of the audio track (e.g., Big endian or little endian) */
    UINT32 Bitrate;                         /**< The bit rate of the audio track */
    UINT16 Volume;                          /**< The volume of the audio track */
} SVC_AUDIO_TRACK_INFO_s;

/**
 * Text track information
 */
typedef struct {
    SVC_MEDIA_TRACK_GENERAL_INFO_s Info;    /**< The general track information */
    UINT8 IsDefault;                        /**< The flag indicating the track is the default text track  */
} SVC_TEXT_TRACK_INFO_s;

/**
 * Movie Info object
 */
typedef struct {
    SVC_MEDIA_INFO_s MediaInfo;    /**< The basic information */
    SVC_VIDEO_TRACK_INFO_s VideoTrack[SVC_FORMAT_MAX_VIDEO_TRACK_PER_MEDIA];  /**< The video tracks (See SVC_VIDEO_TRACK_INFO_s.) */
    SVC_AUDIO_TRACK_INFO_s AudioTrack[SVC_FORMAT_MAX_AUDIO_TRACK_PER_MEDIA];  /**< The audio tracks (See SVC_AUDIO_TRACK_INFO_s.) */
    SVC_TEXT_TRACK_INFO_s TextTrack[SVC_FORMAT_MAX_TEXT_TRACK_PER_MEDIA];     /**< The text tracks (See SVC_TEXT_TRACK_INFO_s.) */
    UINT8 VideoTrackCount;          /**< The number of video tracks in a movie */
    UINT8 AudioTrackCount;          /**< The number of audio tracks in a movie */
    UINT8 TextTrackCount;           /**< The number of text tracks in a movie */
    SVC_ISO_PRIV_INFO_s IsoInfo;    /**< The private data for the information of Iso format. */
    UINT32 UserDataSize;            /**< The size of user data */
    INT64  UserDataPos;             /**< The file position of user data */

    UINT64 MehdPos;                 /**< The file position of mehd box */
    UINT32 MehdSize;                /**< The size of mehd box */
    UINT32 MehdDefDuration;         /**< duration written to mehd by default */
    UINT32 MvhdTimeScale;           /**< The timesclae of duration in mehd (indaicated in mvhd) */
} SVC_MOVIE_INFO_s;

/**
 * Image frame information
 */
typedef struct {
    UINT8 Type;             /**< Image type */
    UINT32 Pos;             /**< Image position */
    UINT32 Size;            /**< Image size */
    UINT16 Width;           /**< Image width */
    UINT16 Height;          /**< Image height */
} SVC_IMAGE_FRAME_INFO_s;

/**
 * Image Info object
 */
typedef struct {
    SVC_MEDIA_INFO_s MediaInfo;     /**< The basic information */
    SVC_FIFO_HDLR_s *Fifo;          /**< The FIFO handler of an image (Each image has individual FIFO handler.) */
    UINT8 *BufferBase;              /**< The start address of the FIFO buffer (User pushs data to the FIFO. The FIFO will write data to the address of the buffer.) */
    UINT32 BufferSize;              /**< The size of the FIFO buffer. */
    SVC_IMAGE_FRAME_INFO_s Frame[SVC_FORMAT_MAX_FRAME_PER_IMAGE]; /**< The image frames (See SVC_IMAGE_FRAME_INFO_s.) */
    SVC_EXIF_INFO_s ExifInfo;       /**< The information of Exif Format (See SVC_EXIF_INFO_s.) */
    UINT8 FrameCount;               /**< The number of frames stored in an image file (the used entries of Frame[SVC_FORMAT_MAX_FRAME_PER_IMAGE]) */
    UINT8 Endian;                   /**< The endian type of an image (0- big endian, 1- little endian) */
} SVC_IMAGE_INFO_s;

struct SVC_MUX_FORMAT_s;
/**
 * Muxing Format handler
 */
typedef struct {
    struct SVC_MUX_FORMAT_s *Func;       /**< The interface of Muxing Format (See SVC_MUX_FORMAT_s.) */
    SVC_MEDIA_INFO_s *Media;               /**< Media Info object */
    SVC_STREAM_HDLR_s *Stream;             /**< Stream handler */
    UINT32 MaxDuration;                     /**< The maximum duration of a movie file */
    UINT64 MaxSize;                         /**< The maximum size of a movie file */
} SVC_MUX_FORMAT_HDLR_s;

/**
 * The interface of Muxing Format (called by Muxer only)
 */
typedef struct SVC_MUX_FORMAT_s{
    UINT32 (*Open)(SVC_MUX_FORMAT_HDLR_s *Hdlr);                       /**< The interface to open a Format handler */
    UINT32 (*Close)(SVC_MUX_FORMAT_HDLR_s *Hdlr, UINT8 Mode);          /**< The interface to close a Format handler */
    UINT32 (*Process)(SVC_MUX_FORMAT_HDLR_s *Hdlr, UINT64 Param, UINT8 *Event);            /**< The interface to perform the muxing of a media */
    UINT32 (*GetMediaTime)(SVC_MUX_FORMAT_HDLR_s *Hdlr, UINT64 *Time); /**< The interface to get the current media time (ms) */
    UINT32 (*SetUserData)(SVC_MUX_FORMAT_HDLR_s *Hdlr, UINT32 Size, const UINT8 *Data);    /**< The interface to to set user data */
} SVC_MUX_FORMAT_s;


/**
 * Muxer close mode (in UINT8)
 */
#define SVC_MUX_FORMAT_CLOSE_DEFAULT   (0x00U) /**< Trim mode (Muxer will trim all of the track duration, and keep the duration of all tracks being shorter than the one of the default track.) */
#define SVC_MUX_FORMAT_CLOSE_NOT_END   (0x01U) /**< No-trim mode (Muxer will keep the duration of all tracks.) */
#define SVC_MUX_FORMAT_CLOSE_RECOVER   (0x02U) /**< Recover mode (Muxer will keep the media index and clip for recovering.) */
#define SVC_MUX_FORMAT_CLOSE_ABORT     (0x03U) /**< Abort mode (Muxer will remove the index.) */


struct SVC_DMX_FORMAT_s;  /**< The interface of Demuxing Format (called by Demuxer only) */

/**
 * Demuxing Format handler
 */
typedef struct {
    struct SVC_DMX_FORMAT_s *Func;       /**< The interface of Demuxing Format (See SVC_DMX_FORMAT_s.) */
    SVC_MEDIA_INFO_s *Media;               /**< Media Info object */
    SVC_STREAM_HDLR_s *Stream;             /**< Stream handler */
    UINT8 Direction;                        /**< The direction in demuxing (See SVC_FORMAT_DIR_e.) */
    UINT8 Speed;                            /**< Demuxing speed (e.q., 1, 2, 4, 8, and 16) */
    UINT8 End;                              /**< Notify EOS once the last frame is fed */
} SVC_DMX_FORMAT_HDLR_s;

/**
 *  The interface of Demuxing Format (called by Demuxer only)
 */
typedef struct SVC_DMX_FORMAT_s {
    UINT32 (*Open)(SVC_DMX_FORMAT_HDLR_s *Hdlr);                           /**< The interface to open a Format handler */
    UINT32 (*Close)(SVC_DMX_FORMAT_HDLR_s *Hdlr);                          /**< The interface to close a Format handler */
    UINT32 (*Process)(SVC_DMX_FORMAT_HDLR_s *Hdlr, UINT64 Param, UINT8 *Event);    /**< The interface to perform the demuxing of a media */
    UINT32 (*GetMediaTime)(SVC_DMX_FORMAT_HDLR_s *Hdlr, UINT64 *Time);     /**< The interface to get the current media time (ms) */
    UINT32 (*Seek)(SVC_DMX_FORMAT_HDLR_s *Hdlr, UINT64 TargetTime, UINT32 Direction, UINT32 Speed);    /**< The interface to seek to a specified time offset (ms) and continue with the specified direction and speed */
    UINT32 (*FeedFrame)(SVC_DMX_FORMAT_HDLR_s *Hdlr, UINT8 TrackId, UINT64 TargetTime, UINT8 Type);    /**< The interface to feed a specified frame to FIFO */
} SVC_DMX_FORMAT_s;

#endif /* FORMAT_H_ */

