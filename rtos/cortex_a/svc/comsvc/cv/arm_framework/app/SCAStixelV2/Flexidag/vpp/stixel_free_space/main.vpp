
#include <vp_vas.h>

// subdags
#include "subdags/object_top_index.vpp"
#include "subdags/object_score.vpp"
#include "subdags/ground_score.vpp"
#include "subdags/confidence.vpp"
#include "subdags/round.vpp"
#include "subdags/cdf_u32.vpp"

#define TRANS_INPUT_DISP_WIDTH					(768)
#define TRANS_INPUT_DISP_HEIGHT					(160)

// 4095
#define INVALID_DISPARITY		"FF 0F"
#define IN_DISPARITY_SHIFT		(4)
#define INVALID_DISPARITY_RSH	(256) // INVALID_DISPARITY >> IN_DISPARITY_SHIFT

//#define OBJECT_INVALID_PENALTY	"01 00"
#define GROUND_INVALID_PENALTY	"01 00"

// DIFF_SATURATION * TRANS_INPUT_DISP_WIDTH must < 65535
#define DIFF_SATURATION		30.0


DAG STIXEL_FREE_SPACE = {	

	// ------------------------- Load input ---------------------------- // 
	// seen as u16
	VP_input(
		in_disparity, uint16_t, 
		vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH)
	);

	VP_input(
		in_esti_ground_disparity, float16_t, 
		vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH)
	);

	VP_input(
		in_obj_top_x_index, uint16_t, 
		vector(1, 1, 1, TRANS_INPUT_DISP_WIDTH)
	);

	VP_input(
		in_ground_disp_coef, uint16_t, 
		vector(1, 1, 1, TRANS_INPUT_DISP_WIDTH)
	);

	VP_input(
		in_cfg, uint16_t, vector(3)
	);

	VP_crop(
		in_cfg,
		VP_tensor(object_weight, uint16_t, vector(1)),
		w = 1, h = 1, d = 1, p = 1,
		start_w = 0, start_h = 0, start_d = 0, start_p = 0, zr = 1,
	);

	VP_crop(
		in_cfg,
		VP_tensor(ground_weight, uint16_t, vector(1)),
		w = 1, h = 1, d = 1, p = 1,
		start_w = 1, start_h = 0, start_d = 0, start_p = 0, zr = 1,
	);

	VP_crop(
		in_cfg,
		VP_tensor(ground_toler, uint16_t, vector(1)),
		w = 1, h = 1, d = 1, p = 1,
		start_w = 2, start_h = 0, start_d = 0, start_p = 0, zr = 1,
	);


	// to pixel
	// ----------------------------------------------------------------------	
	VP_scalar(disp_rsh_bits, uint8_t, IN_DISPARITY_SHIFT);	

	call =
	{
		callee=Round,
		$in=in_disparity,
		$rsh_bits=disp_rsh_bits,

		$out=uint_disparity,
	};

	// seen as 8.4 format and cast to float
	VP_typecast(		
		in_disparity,		
		VP_auto(reinterp_disp, data_format(0, 1, IN_DISPARITY_SHIFT, 0))
	);
	VP_typeconv(		
		reinterp_disp,		
		VP_auto(float_disparity, float16_t)
	);

	VP_scalar(rsh_invalid_disp, uint16_t, INVALID_DISPARITY_RSH);
	
	// Transfer input format
	// [x0, x1 .... x_w] to 
	// [ [x00, x01 .... x0w, x10, x11 .... x1w, xh0, xh1 .... xhw], 
	// 	[y00, y01 .... y0w, y10, y11 .... y1w, yh0, yh1 .... yhw] ]
	// ----------------------------------------------------------------------	
	call =
	{
		callee=Object_Top_Index,
		$obj_top_x_index=in_obj_top_x_index,
		$disparity_in_width=TRANS_INPUT_DISP_WIDTH,
		$disparity_in_height=TRANS_INPUT_DISP_HEIGHT,
		$obj_top_index_map_out=obj_top_index_map,
	};

	// fill estimation ground disparity to invalid region
	// ----------------------------------------------------------------------	
	VP_eqb(
		uint_disparity, 
		rsh_invalid_disp,
		VP_tensor(invalid_disp_mask, uint8_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH), bitvector = 1)
	);	

	VP_typeconv(		
		in_esti_ground_disparity,		
		VP_auto(uint_esti_ground_disparity, uint16_t)
	);

	VP_muxb(		
		uint_esti_ground_disparity, 
		uint_disparity, 
		invalid_disp_mask,
		VP_tensor(uint_filtered_disparity, uint16_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH))
	);

	VP_muxb(		
		in_esti_ground_disparity, 
		float_disparity, 
		invalid_disp_mask,
		VP_tensor(float_filtered_disparity, float16_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH))
	);

	call =
	{
		callee=Object_Score,
		$disparity_in=uint_filtered_disparity,
		$disparity_in_width=TRANS_INPUT_DISP_WIDTH,
		$disparity_in_height=TRANS_INPUT_DISP_HEIGHT,
		$obj_top_index=obj_top_index_map,
		$ground_disp_coef=in_ground_disp_coef,
		$esti_ground_disparity=uint_esti_ground_disparity,
		$obj_score_out=obj_score,
	};

	call =
	{
		callee=Ground_Score,
		$disparity_in=float_filtered_disparity,
		$disparity_in_width=TRANS_INPUT_DISP_WIDTH,
		$disparity_in_height=TRANS_INPUT_DISP_HEIGHT,
		$default_invalid_penalty=GROUND_INVALID_PENALTY,
		$invalid_disp_mask=invalid_disp_mask,
		$esti_ground_disparity=in_esti_ground_disparity,
		$ground_in_toler=ground_toler,
		$diff_saturation_val=DIFF_SATURATION,
		$ground_score_out=ground_score,
	};	
	    
	call =
	{
		callee=Confidence,
		$esti_ground_disparity=uint_esti_ground_disparity,
		$disparity_width=TRANS_INPUT_DISP_WIDTH,
		$disparity_height=TRANS_INPUT_DISP_HEIGHT,
		$invalid_disp_mask=invalid_disp_mask,
		$confidence_out=confidence_map,
	};

    // Get node score: (object_socre + ground_socre)*weight
    //========================================================
	VP_mul(
		obj_score, 
		object_weight,
		VP_tensor(weighted_obj_score, float16_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH)),
		disable_reserved = 1 // disable NaN and inf symbols
	);

	VP_mul(
		ground_score, 
		ground_weight,
		VP_tensor(weighted_ground_score, float16_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH)),
		disable_reserved = 1 // disable NaN and inf symbols
	);

	VP_add(
		weighted_obj_score, weighted_ground_score,
		VP_tensor(node_score_float, float16_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH))
	);

	VP_typeconv(
		node_score_float, 
		VP_tensor(node_score_uint, uint16_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH))
	);
	//========================================================

	// sitxel bottom should not locate in the region above vanishing line
	//========================================================
	VP_eqib(
		uint_esti_ground_disparity, 
		VP_const_tensor("00 00", uint16_t, vector(1)),
		VP_tensor(above_hor_mask, uint8_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH), bitvector = 1)
	);	

	VP_muxb(		
		VP_const_tensor("FF FF", uint16_t, vector(1)),
		node_score_uint, 
		above_hor_mask,
		VP_tensor(node_score, uint16_t, vector(1, 1, TRANS_INPUT_DISP_HEIGHT, TRANS_INPUT_DISP_WIDTH))
	);
	//========================================================

	// For each row, search minimum score
	VP_mmrw(		
		node_score,
		VP_auto(min_node_score, uint16_t),
		VP_auto(min_node_score_pos, uint16_t),
		op = 0 // min
	);    
     
	//VP_output(obj_score_out, obj_score);
	//VP_output(ground_score_out, ground_score);
	//VP_output(node_score_out, node_score);

    VP_output(min_node_score_pos_out, min_node_score_pos);    
    VP_output(confidence_map_out, confidence_map);       
}
