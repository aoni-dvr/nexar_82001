/**
 *  @file AmbaImgEvent_Internal.h
 *
 *  Copyright (c) [2020] Ambarella International LP
 *
 *  This file and its contents ("Software") are protected by intellectual
 *  property rights including, without limitation, U.S. and/or foreign
 *  copyrights. This Software is also the confidential and proprietary
 *  information of Ambarella International LP and its licensors. You may not use, reproduce,
 *  disclose, distribute, modify, or otherwise prepare derivative works of this
 *  Software or any portion thereof except pursuant to a signed license agreement
 *  or nondisclosure agreement with Ambarella International LP or its authorized affiliates.
 *  In the absence of such an agreement, you agree to promptly notify and return
 *  this Software to Ambarella International LP.
 *
 *  This file includes sample code and is only for internal testing and evaluation.  If you
 *  distribute this sample code (whether in source, object, or binary code form), it will be
 *  without any warranty or indemnity protection from Ambarella International LP or its affiliates.
 *
 *  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT,
 *  MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL AMBARELLA INTERNATIONAL LP OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *
 *  @details Constants and Definitions for Amba Image Event Internal
 *
 */

#ifndef AMBA_IMG_EVENT_INTERNAL_H
#define AMBA_IMG_EVENT_INTERNAL_H

#define IMG_EVENT_OP_SHIFT    (1U)
#define IMG_EVENT_CLR_MASK    (0x1U)

#define IMG_EVENT_AND         (AMBA_KAL_FLAGS_ALL << IMG_EVENT_OP_SHIFT)
#define IMG_EVENT_AND_CLR     (IMG_EVENT_AND | 0x1U)
#define IMG_EVENT_OR          (AMBA_KAL_FLAGS_ANY << IMG_EVENT_OP_SHIFT)
#define IMG_EVENT_OR_CLR      (IMG_EVENT_OR | 0x1U)

typedef enum /*_AMBA_IMG_EVENT_CHAN_ID_e_*/ {
    IMAGE_EVENT_CHAN_ID_SHR_ACK = 0,
    IMAGE_EVENT_CHAN_ID_AGC_ACK,
    IMAGE_EVENT_CHAN_ID_AGC_ACK_EOF,
    IMAGE_EVENT_CHAN_ID_AGC_ACK_MOF,
    IMAGE_EVENT_CHAN_ID_AGC_ACK_AAA,
    IMAGE_EVENT_CHAN_ID_DGC_ACK,
    IMAGE_EVENT_CHAN_ID_DGC_ACK_EOF,
    IMAGE_EVENT_CHAN_ID_DGC_ACK_MOF,
    IMAGE_EVENT_CHAN_ID_DGC_ACK_AAA,

    IMAGE_EVENT_CHAN_ID_SSI_SOF,
    IMAGE_EVENT_CHAN_ID_SSI_EOF,
    IMAGE_EVENT_CHAN_ID_SSI_SVR_ACK,
    IMAGE_EVENT_CHAN_ID_SVR_UPD,
    IMAGE_EVENT_CHAN_ID_SVR_CHG,

    IMAGE_EVENT_CHAN_ID_DGC_SOF,
    IMAGE_EVENT_CHAN_ID_DDGC_SOF,

    IMAGE_EVENT_CHAN_ID_AIK_SOF,
    IMAGE_EVENT_CHAN_ID_AIK_EOF,

    IMAGE_EVENT_CHAN_ID_PAIK_ADV,
    IMAGE_EVENT_CHAN_ID_PAIK_SOR,
    IMAGE_EVENT_CHAN_ID_PAIK_EOR,

    IMAGE_EVENT_CHAN_ID_MSC_SOF
} AMBA_IMG_EVENT_CHAN_ID_e;

#define    IMAGE_EVENT_CHAN_FLAG_SHR_ACK        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_SHR_ACK)
#define    IMAGE_EVENT_CHAN_FLAG_AGC_ACK        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_AGC_ACK)
#define    IMAGE_EVENT_CHAN_FLAG_AGC_ACK_EOF    (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_AGC_ACK_EOF)
#define    IMAGE_EVENT_CHAN_FLAG_AGC_ACK_MOF    (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_AGC_ACK_MOF)
#define    IMAGE_EVENT_CHAN_FLAG_AGC_ACK_AAA    (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_AGC_ACK_AAA)
#define    IMAGE_EVENT_CHAN_FLAG_DGC_ACK        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_DGC_ACK)
#define    IMAGE_EVENT_CHAN_FLAG_DGC_ACK_EOF    (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_DGC_ACK_EOF)
#define    IMAGE_EVENT_CHAN_FLAG_DGC_ACK_MOF    (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_DGC_ACK_MOF)
#define    IMAGE_EVENT_CHAN_FLAG_DGC_ACK_AAA    (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_DGC_ACK_AAA)

#define    IMAGE_EVENT_CHAN_FLAG_SSI_SOF        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_SSI_SOF)
#define    IMAGE_EVENT_CHAN_FLAG_SSI_EOF        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_SSI_EOF)
#define    IMAGE_EVENT_CHAN_FLAG_SSI_SVR_ACK    (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_SSI_SVR_ACK)
#define    IMAGE_EVENT_CHAN_FLAG_SVR_UPD        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_SVR_UPD)
#define    IMAGE_EVENT_CHAN_FLAG_SVR_CHG        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_SVR_CHG)

#define    IMAGE_EVENT_CHAN_FLAG_DGC_SOF        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_DGC_SOF)
#define    IMAGE_EVENT_CHAN_FLAG_DDGC_SOF       (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_DDGC_SOF)

#define    IMAGE_EVENT_CHAN_FLAG_AIK_SOF        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_AIK_SOF)
#define    IMAGE_EVENT_CHAN_FLAG_AIK_EOF        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_AIK_EOF)

#define    IMAGE_EVENT_CHAN_FLAG_PAIK_ADV       (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_PAIK_ADV)
#define    IMAGE_EVENT_CHAN_FLAG_PAIK_SOR       (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_PAIK_SOR)
#define    IMAGE_EVENT_CHAN_FLAG_PAIK_EOR       (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_PAIK_EOR)

#define    IMAGE_EVENT_CHAN_FLAG_MSC_SOF        (1ULL << (UINT64) IMAGE_EVENT_CHAN_ID_MSC_SOF)

typedef enum /*_AMBA_IMG_EVENT_VIN_ID_e_*/ {
    IMAGE_EVENT_VIN_ID_STAT_RDY = 0,
    IMAGE_EVENT_VIN_ID_STAT_SKIP,
    IMAGE_EVENT_VIN_ID_STAT_GO
} AMBA_IMG_EVENT_VIN_ID_e;

#define    IMAGE_EVENT_VIN_FLAG_STAT_RDY     (1ULL << (UINT64) IMAGE_EVENT_VIN_ID_STAT_RDY)
#define    IMAGE_EVENT_VIN_FLAG_STAT_SKIP    (1ULL << (UINT64) IMAGE_EVENT_VIN_ID_STAT_SKIP)
#define    IMAGE_EVENT_VIN_FLAG_STAT_GO      (1ULL << (UINT64) IMAGE_EVENT_VIN_ID_STAT_GO)

UINT32 AmbaImgEvent_VinPut(UINT32 VinId, UINT64 Flag);
UINT64 AmbaImgEvent_VinGet(UINT32 VinId, UINT64 Flag, UINT32 Option, UINT32 Timeout);
UINT32 AmbaImgEvent_VinClr(UINT32 VinId, UINT64 Flag);

UINT32 AmbaImgEvent_ChanPut(AMBA_IMG_CHANNEL_ID_s ImageChanId, UINT64 Flag);
UINT64 AmbaImgEvent_ChanGet(AMBA_IMG_CHANNEL_ID_s ImageChanId, UINT64 Flag, UINT32 Option, UINT32 Timeout);
UINT32 AmbaImgEvent_ChanClr(AMBA_IMG_CHANNEL_ID_s ImageChanId, UINT64 Flag);

#endif  /* AMBA_IMG_EVENT_INTERNAL_H */
