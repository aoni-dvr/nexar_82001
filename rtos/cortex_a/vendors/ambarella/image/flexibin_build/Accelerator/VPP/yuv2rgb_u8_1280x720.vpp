/******************************************************************************/
/* Copyright (c) 2019 Ambarella, Inc.
/*
/* This file and its contents ("Software") are protected by intellectual property rights including,
/* without limitation, U.S. and/or foreign copyrights.  This Software is also the confidential and
/* proprietary information of Ambarella, Inc. and its licensors.  You may not use, reproduce, disclose,
/* distribute, modify, or otherwise prepare derivative works of this Software or any portion thereof
/* except pursuant to a signed license agreement or nondisclosure agreement with Ambarella, Inc. or
/* its authorized affiliates.  In the absence of such an agreement, you agree to promptly notify and
/* return this Software to Ambarella, Inc.
/*
/* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
/* TO, THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE
/* ARE DISCLAIMED. IN NO EVENT SHALL AMBARELLA, INC. OR ITS AFFILIATES BE LIABLE FOR ANY DIRECT, INDIRECT,
/* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
/* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; COMPUTER FAILURE OR MALFUNCTION; OR
/* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
/* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
/* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/******************************************************************************/

/*********************************************************************/
/*                                                                   */
/*  VPP:                                                             */
/*      Implements yuv420 to bgr transformation using vpp.           */
/*                                                                   */
/*********************************************************************/

#include "vp_vas.h"

#define INPUT_W     1280
#define INPUT_H     720

DAG yuv420sp2bgr_prim = {
    /* primary input data (data_y) */
    VP_input(
        data_y,
        uint8_t,
        vector(1, 1, INPUT_H, INPUT_W)
    );

    /* primary input data (data_uv) */
    VP_input(
        data_uv,
        uint8_t,
        vector(1, 2, INPUT_H/2, INPUT_W/2),
        dram_format = 1
    );

    /* resample in spatial dimensions ( uv upsamle (1,2,H/2,W/2) => (1,2,H,W)) */
    VP_resamp(
        data_uv /* source tensor */,
        VP_tensor(uv_upsample),
        replicate_w = false,
        replicate_h = false,
        resamp_mode = 0,
        initial_phase_w = 0, /* 13.13 = 0 */
        initial_phase_h = 0,
        phase_inc_w = 4096,  /* 11.13 = 0.5 */
        phase_inc_h = 4096,
        out_w = INPUT_W,
        out_h = INPUT_H
    );

    /* merge along channel (merge yuv to yuv444 (1,1,H,W) + (1,2,H,W) => (1,3,H,W)) */
    VP_merged(
        data_y,
        uv_upsample,
        VP_tensor(yuv444)
    );

    /* add immediate (yuv444_bias = [Y, U-128, V-128]) */
    VP_addi(
        yuv444,
        VP_imm("bias.bin", int8_t, vector(1, 3, 1, 1)),
        VP_auto(yuv444_bias),
        strong_zero = true,
        disable_reserved = true
    );

    /* dot the converted matrix
     *
     *   R       1, -0.00093, 1.401687        Y
     * [ G ] = [ 1, -0.3437, -0.71417 ] x [ U-128 ]
     *   B       1,  1.77216, 0.00099       V-128
     */
    /* convolution 2d with immediate, per-channel exponent, apply pooling, bias, negscale */
    VP_conv2iepbs(
        yuv444_bias /* activation input to convolution */,
        VP_imm("kernel.bin", data_format(1, 1, 7, 0), vector(3, 3, 1, 1)),
        undef,
        undef,
        undef,
        VP_tensor(rgb, uint8_t),
        start_w = 0,
        start_h = 0,
        stride_w = 1,
        stride_h = 1,
        out_w = INPUT_W,
        out_h = INPUT_H,
        pool_mode = 0,
        pool_w = 1,
        pool_h = 1,
        zr = true,
        strong_zero = true,
        disable_reserved = true
    );

    /* primary output data (output_rgb) */
    VP_output(
        output_rgb,
        rgb,
    );

  }
