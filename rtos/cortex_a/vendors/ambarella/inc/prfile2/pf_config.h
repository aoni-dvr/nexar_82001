/*
     Copyright (C) 2004 By eSOL Co.,Ltd. Tokyo, Japan

     This software is protected by the law and the agreement concerning
     a Japanese country copyright method, an international agreement,
     and other intellectual property right and may be used and copied
     only in accordance with the terms of such license and with the inclusion
     of the above copyright notice.

     This software or any other copies thereof may not be provided
     or otherwise made available to any other person.  No title to
     and ownership of the software is hereby transferred.

     The information in this software is subject to change without
     notice and should not be construed as a commitment by eSOL Co.,Ltd.
 */
 /****************************************************************************
 [pf_config.h] - PrFILE2 configuration file
 ****************************************************************************/
#ifndef PF_CONFIG_H
#define PF_CONFIG_H

#include "parts.cfg"
#include "kernel.cfg"

/***************************************************************************
  CONFIGURATIONS
 ***************************************************************************/
#if USE_EBINDER
  /*
   * In eBinder environment, PrFILE2's system parameters are defined in
   * configuration file 'eb_pf_config.h', which is auto-generated by
   * eBinder Configurator.
   */
#include "prfile2/eb_pf_config.h"

#else /* ! USE_EBINDER */
  /*
   * In non-eBinder environment, PrFILE2's system parameters are defined
   * here:
   */

  /*
   * If set, backward compatibility support with PrFILE is enabled.
   */
#define PF_BACKWARD_COMPATIBILITY_SUPPORT   0

  /*
   * If set, only the native API set are available:
   *   - pf_fopen(), pf_fclose(), pf_fread(), pf_fwrite(), ...
   *
   * Otherwise the CLIB-compatible API set are also available, which are
   * compatible with C Standard Library functions:
   *   - fopen(), fclose(), fread(), fwrite(), ...
   * Change to below.
   *
   * If set, the CLIB-compatible API set are also available, which are
   * compatible with C Standard Library functions:
   *   - fopen(), fclose(), fread(), fwrite(), ...
   *
   * Otherwise only the native API set are available:
   *   - pf_fopen(), pf_fclose(), pf_fread(), pf_fwrite(), ...
   * Default : 0
   *
   * NOTES:
   *  - The CLIB-compatible API functions are inplemented as macros.
   *    Caller files shall include 'pf_api.h' to define these macros.
   *  - This is equivalent of 'USE_STDLIB' for PrFILE, however,
   *    the meaning is reversed.
   */
#define PF_STDLIB_ALIAS_SUPPORT             0

  /*
   * Character code set for pathname. Available options are as follows:
   *
   *    - ASCII
   *    - CP874 (THAI)      This is compatible with CodePage874.
   *    - CP932 (SHIFT_JIS) This is compatible with CodePage932.
   *    - CP936 (GBK)       This is compatible with CodePage936.
   *    - CP949 (KOREAN)    This is compatible with CodePage949.
   *    - CP950 (BIG_5)     This is compatible with CodePage950.
   *    - CP1250(LATIN_2)   This is compatible with CodePage1250.
   *    - CP1251(CYRILLIC)  This is compatible with CodePage1251.
   *    - CP1252(LATIN_1)   This is compatible with CodePage1252.
   *    - CP1256(ARABIC)    This is compatible with CodePage1256.
   */
#define PF_CHARACTER_CODE_SET               ASCII

  /*
   * The maximum number of disks. (1 - 26)
   * Default : 1
   *
   * NOTES:
   *  - This parameter determines that available to number of use disks.
   *  - This version is only support attach, and if you attach function
   *    called, can not change attach parameter.
   *    If you want to change parameter, initialize PrFILE2 that call
   *    pf_init_prfile2() function.
   *  - This is equivalent of 'MAX_UNIT' for PrFILE.
   */
#define PF_MAX_DISK                         16

  /*
   * If set, PrFILE2 controls the exclusive disk access.
   * But the every API call will be performed in order.
   * Default : 0
   */
#define PF_EXCLUSIVE_DISK_ACCESS_ENABLE     0

  /*
   * The maximum number of volumes. (1 - 26)
   * Default : 1
   *
   * NOTES:
   *  - This parameter determines that available attach drives.
   *  - This version is only support attach, and if you attach function
   *    called, can not change attach parameter.
   *    If you want to change parameter, initialize PrFILE2 that call
   *    pf_init_prfile2() function.
   *  - This is equivalent of 'MAX_UNIT' for PrFILE.
   */
#define PF_MAX_VOLUME                       16

  /*
   * The maximum number of files. (>=1)
   * Default : 5
   *
   * NOTES:
   *  - This parameter determines that available open files.
   */
#define PF_MAX_FILE_NUM                     20

  /*
   * The maximum number of directories. (>=1)
   * Default : 3
   *
   * NOTES:
   *  - This parameter determines that available open directories.
   */
#define PF_MAX_DIR_NUM                      3

  /*
   * The maximum number of contexts. (>=0)
   * Default : 0
   *
   * NOTES:
   *  - This parameter determines that available contexts.
   */
#define PF_MAX_CONTEXT_NUM                  0

  /*
   * The maximum number of codeset. (>= 0)
   * Default : 2
   */
#define PF_MAX_CODESET                      2

  /*
   * If set, automatic register contexts is enable.
   * Default : 0
   *
   * NOTES:
   *  - This parameter determines that a context is managed automatically.
   */
#define PF_AUTO_REGCTX_SUPPORT              0

  /*
   * If set, using API stub that within message passing system.
   * Default : 0
   */
#define PF_USE_API_STUB                     0

  /*
   * If set, PrFILE2 controls the critical section.
   * This enables the reentrant API call for every volume.
   * But the every API call will be performed in order.
   * Default : 0
   */
#define PF_CRITICAL_SECTION_ENABLE          1

  /*
   * If set, you can expect to check the parameter error of application API.
   * Default : 0
   */
#define PF_PARAM_CHECK_ENABLE               1

/*
   * The maximum number of empty entries detected by pf_getempent().
   * Default : 0x1000L
   */
#define PF_MAX_EMPTY_ENTRY_DETECT           (0x1000L)

  /*
   * Searching the file from the continuation of the last file position.
   * Default : 0
   */
#define PF_SEQUENTIAL_FILE_SEARCH_SUPPORT   1

  /*
   * Searching the file from the continuation of the last file position.
   * Default : 0
   */
#define PF_DIRCACHE_SUPPORT                 0

#if PF_DIRCACHE_SUPPORT
  /*
   * Directory cache config
   * 0: The position is set to the opened file
   * 1: The position is set to the head of the cluster which there is the opened file
   * Default : 0
   */
#define PF_DIRCACHE_POS_SETTING             0

#endif /* PF_DIRCACHE_SUPPORT */

#endif /* USE_EBINDER */

  /*
   * If set, PrFILE2 locks memory space set to the driver.
   * Default : 1
   */
#define PF_LOCK_SPACE_ENABLE                0

  /*
   * Don't change this definition.
   *
   * Please refer to "parts.cfg", when you change endian.
   *
   */
#if defined ESOL_BIG_ENDIAN
#define PF_BIG_ENDIAN                       1
#else
#define PF_BIG_ENDIAN                       0
#endif

#ifdef EB_PRFILE2_SUPPORT_PFS_IF
  #define PF_PFS_SUPPORT                    1
#else
  #define PF_PFS_SUPPORT                    0
#endif

#ifdef EB_PFS_PLUGIN_FOR_LFS_SUPPORT
  #define PFS_PLUGIN_FOR_LFS_SUPPORT        1
#else
  #define PFS_PLUGIN_FOR_LFS_SUPPORT        0
#endif

#ifdef EB_PFS_INIT_MAX_CONTEXT_NUM
  #define PFS_INIT_MAX_CONTEXT_NUM          EB_PFS_INIT_MAX_CONTEXT_NUM
#else
  #define PFS_INIT_MAX_CONTEXT_NUM          1
#endif

#include "prfile2/pf_config_ext.h"
#include "prfile2/pf_cfg_p.h"

#if PF_UNICODE_INTERFACE_SUPPORT
#include "prfile2/pf_w_config.h"
#endif /* PF_UNICODE_INTERFACE_SUPPORT */

#if PF_EXFAT_SUPPORT
#include "prfile2/pf_exfat_config.h"
#endif

#if !((PF_MAX_EMPTY_ENTRY_DETECT >= (-1)) && (PF_MAX_EMPTY_ENTRY_DETECT <= (0x7FFFFFFF)))
#error "PF_MAX_EMPTY_ENTRY_DETECT" is invalid value.
#endif

#if ((PF_AUTO_REGCTX_SUPPORT != 0) && (PF_MAX_CONTEXT_NUM == 0))
#error "If PF_AUTO_REGCTX_SUPPORT is '1', PF_MAX_CONTEXT_NUM should be '1' or more."
#endif /* ((PF_AUTO_REGCTX_SUPPORT == 1) && (PF_MAX_CONTEXT_NUM == 0)) */

#if (PF_SEQUENTIAL_FILE_SEARCH_SUPPORT != 0) && (PF_DIRCACHE_SUPPORT != 0)
#error "Please set either PF_SEQUENTIAL_FILE_SEARCH_SUPPORT or PF_DIRCACHE_SUPPORT"
#endif

#endif /* PF_CONFIG_H */
